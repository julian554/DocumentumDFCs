package es.documentum.pantalla;

import com.documentum.fc.client.IDfSession;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.IDfList;
import es.documentum.utilidades.ClassPathUpdater;
import es.documentum.utilidades.Utilidades;
import es.documentum.utilidades.UtilidadesDocumentum;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.StringTokenizer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;

import javax.swing.JTable;

public class PantallaApi extends javax.swing.JFrame {

    Utilidades util = new Utilidades();
    UtilidadesDocumentum utildocum = new UtilidadesDocumentum();
    PantallaBarra barradocum = null;
    Boolean botonderecho = false;
    String componente = "";
    String idControl = "";
    IDfSession gsesion;

    public void setSesion(IDfSession psesion) {
        this.gsesion = psesion;
    }

    public static PantallaDocumentum ventanapadre = null;

    public PantallaApi(PantallaDocumentum parent, boolean modal) {
        ventanapadre = parent;
        initComponents();
        try {
            setIconImage(new ImageIcon(getLogo()).getImage());
        } catch (NullPointerException e) {
            Utilidades.escribeLog("\nError cargando el Logo " + e.getMessage() + "\n");
        }

        pintarMulti(checkMulti.isSelected());
        setLocationRelativeTo(null);
        cargarComboHistorial();

    }

    protected static Image getLogo() {
        //   java.net.URL imgURL = PantallaDocumentum.class.getClassLoader().getResource("es/documentum/imagenes/documentum_logo_mini.gif");
        java.net.URL imgURL = PantallaDocumentum.class.getClassLoader().getResource("es/documentum/imagenes/DCTM_32.png");

        if (imgURL != null) {
            return new ImageIcon(imgURL).getImage();
        } else {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupEditar = new javax.swing.JPopupMenu();
        opcionCopiar = new javax.swing.JMenuItem();
        opcionPegar = new javax.swing.JMenuItem();
        popupDatos = new javax.swing.JPopupMenu();
        opcionCopiarValor = new javax.swing.JMenuItem();
        panelAPI = new javax.swing.JPanel();
        scrollMultiAPI = new javax.swing.JScrollPane();
        textoMultiAPI = new javax.swing.JTextArea();
        botonConsultar = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textoLog = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelDatos = new javax.swing.JLabel();
        textoDatosApi = new javax.swing.JTextField();
        checkMulti = new javax.swing.JCheckBox();
        textoAPI = new javax.swing.JTextField();
        BotonBorrarSalida = new javax.swing.JButton();
        checkMostrarSQL = new javax.swing.JCheckBox();
        comboHistorial = new javax.swing.JComboBox();
        panelEstado = new javax.swing.JPanel();
        EtiquetaEstado = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        opciones = new javax.swing.JMenu();
        opcionConsultar = new javax.swing.JMenuItem();
        opcionSalir = new javax.swing.JMenuItem();

        opcionCopiar.setText("Copiar Ctrl+C");
        opcionCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCopiarActionPerformed(evt);
            }
        });
        popupEditar.add(opcionCopiar);

        opcionPegar.setText("Pegar  Ctrl+V");
        opcionPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionPegarActionPerformed(evt);
            }
        });
        popupEditar.add(opcionPegar);

        opcionCopiarValor.setText("Copiar Valor");
        opcionCopiarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCopiarValorActionPerformed(evt);
            }
        });
        popupDatos.add(opcionCopiarValor);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Consultas a Documentum por API");
        setMinimumSize(new java.awt.Dimension(1022, 740));

        panelAPI.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        textoMultiAPI.setColumns(20);
        textoMultiAPI.setLineWrap(true);
        textoMultiAPI.setRows(5);
        textoMultiAPI.setWrapStyleWord(true);
        textoMultiAPI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textoMultiAPIMousePressed(evt);
            }
        });
        scrollMultiAPI.setViewportView(textoMultiAPI);
        textoMultiAPI.getAccessibleContext().setAccessibleName("textoDql");

        botonConsultar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/ejecutar_peq.png"))); // NOI18N
        botonConsultar.setText("Ejecutar");
        botonConsultar.setMaximumSize(new java.awt.Dimension(100, 40));
        botonConsultar.setMinimumSize(new java.awt.Dimension(100, 40));
        botonConsultar.setPreferredSize(new java.awt.Dimension(100, 40));
        botonConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConsultarActionPerformed(evt);
            }
        });

        botonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/salir_peq.png"))); // NOI18N
        botonSalir.setText("Salir");
        botonSalir.setMaximumSize(new java.awt.Dimension(100, 40));
        botonSalir.setMinimumSize(new java.awt.Dimension(100, 40));
        botonSalir.setPreferredSize(new java.awt.Dimension(100, 40));
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        jScrollPane2.setPreferredSize(new java.awt.Dimension(166, 72));

        textoLog.setEditable(false);
        textoLog.setColumns(20);
        textoLog.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        textoLog.setLineWrap(true);
        textoLog.setRows(2);
        textoLog.setWrapStyleWord(true);
        textoLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textoLogMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(textoLog);
        textoLog.getAccessibleContext().setAccessibleName("textoLog");

        jLabel1.setText("Salida");

        jLabel2.setText("Comandos API");

        labelDatos.setText("Datos API");

        checkMulti.setText("Script (múltiples líneas)");
        checkMulti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMultiActionPerformed(evt);
            }
        });

        BotonBorrarSalida.setText("Borrar Salida");
        BotonBorrarSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBorrarSalidaActionPerformed(evt);
            }
        });

        checkMostrarSQL.setText(" Mostrar el SQL");
        checkMostrarSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMostrarSQLActionPerformed(evt);
            }
        });

        comboHistorial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                comboHistorialMousePressed(evt);
            }
        });
        comboHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboHistorialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAPILayout = new javax.swing.GroupLayout(panelAPI);
        panelAPI.setLayout(panelAPILayout);
        panelAPILayout.setHorizontalGroup(
            panelAPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAPILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAPILayout.createSequentialGroup()
                        .addComponent(labelDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAPILayout.createSequentialGroup()
                        .addGroup(panelAPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboHistorial, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAPILayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 646, Short.MAX_VALUE)
                                .addComponent(BotonBorrarSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scrollMultiAPI, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAPILayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(checkMulti))
                            .addComponent(textoAPI, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textoDatosApi))
                        .addGap(32, 32, 32)
                        .addGroup(panelAPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonConsultar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botonSalir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkMostrarSQL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23))))
        );
        panelAPILayout.setVerticalGroup(
            panelAPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAPILayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(panelAPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAPILayout.createSequentialGroup()
                        .addGroup(panelAPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(checkMulti))
                        .addGap(7, 7, 7)
                        .addComponent(textoAPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(botonConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panelAPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAPILayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollMultiAPI, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelDatos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoDatosApi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(comboHistorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelAPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonBorrarSalida))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
                    .addGroup(panelAPILayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(checkMostrarSQL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        panelEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panelEstadoLayout = new javax.swing.GroupLayout(panelEstado);
        panelEstado.setLayout(panelEstadoLayout);
        panelEstadoLayout.setHorizontalGroup(
            panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(EtiquetaEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelEstadoLayout.setVerticalGroup(
            panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(EtiquetaEstado, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
        );

        opciones.setText("Opciones");

        opcionConsultar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        opcionConsultar.setText("Ejecutar comando de API");
        opcionConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionConsultarActionPerformed(evt);
            }
        });
        opciones.add(opcionConsultar);

        opcionSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        opcionSalir.setText("Salir");
        opcionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSalirActionPerformed(evt);
            }
        });
        opciones.add(opcionSalir);

        jMenuBar1.add(opciones);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelAPI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelAPI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(panelEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        salir();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void botonConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConsultarActionPerformed
        if (checkMulti.isSelected()) {
            ejecutarAPI(textoMultiAPI.getText(), "");
        } else {
            ejecutarAPI(textoAPI.getText(), textoDatosApi.getText());
        }
    }//GEN-LAST:event_botonConsultarActionPerformed

    private void opcionConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionConsultarActionPerformed
        if (checkMulti.isSelected()) {
            ejecutarAPI(textoMultiAPI.getText(), "");
        } else {
            ejecutarAPI(textoAPI.getText(), textoDatosApi.getText());
        }
    }//GEN-LAST:event_opcionConsultarActionPerformed

    private void opcionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSalirActionPerformed
        salir();
    }//GEN-LAST:event_opcionSalirActionPerformed

    private void opcionCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCopiarActionPerformed
        if (componente.equals("textoMultiAPI")) {
            if (textoMultiAPI.getSelectedText() == null) {
                Utilidades.copiarTextoPortapapeles(textoMultiAPI.getText());
            } else {
                Utilidades.copiarTextoPortapapeles(textoMultiAPI.getSelectedText());
            }
        }
        if (componente.equals("textoLog")) {
            if (textoLog.getSelectedText() == null) {
                Utilidades.copiarTextoPortapapeles(textoLog.getText());
            } else {
                Utilidades.copiarTextoPortapapeles(textoLog.getSelectedText());
            }
        }
    }//GEN-LAST:event_opcionCopiarActionPerformed

    private void opcionPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionPegarActionPerformed
        if (componente.equals("textoMultiAPI")) {
            textoMultiAPI.setText(Utilidades.pegarTextoPortapapeles());
        }

    }//GEN-LAST:event_opcionPegarActionPerformed

    private void opcionCopiarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCopiarValorActionPerformed
        if (componente.equals("tablaResultados")) {
            //  Utilidades.copiarTextoPortapapeles(tablaResultados.getModel().getValueAt(tablaResultados.convertRowIndexToModel(tablaResultados.getSelectedRow()), tablaResultados.getSelectedColumn()).toString());
        }
    }//GEN-LAST:event_opcionCopiarValorActionPerformed

    private void textoMultiAPIMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textoMultiAPIMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            botonderecho = true;
            componente = "textoMultiAPI";
            popupmenu(evt);
        }
    }//GEN-LAST:event_textoMultiAPIMousePressed

    private void textoLogMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textoLogMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            botonderecho = true;
            componente = "textoLog";
            popupmenu(evt);
        }
    }//GEN-LAST:event_textoLogMousePressed

    private void checkMultiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMultiActionPerformed
        pintarMulti(checkMulti.isSelected());
    }//GEN-LAST:event_checkMultiActionPerformed

    private void BotonBorrarSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBorrarSalidaActionPerformed
        textoLog.setText("");
    }//GEN-LAST:event_BotonBorrarSalidaActionPerformed

    private void checkMostrarSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMostrarSQLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkMostrarSQLActionPerformed

    private void comboHistorialMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboHistorialMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            componente = "comboHistorial";
            botonderecho = true;
            popupmenu(evt);
        }
    }//GEN-LAST:event_comboHistorialMousePressed

    private void comboHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboHistorialActionPerformed
        String valor = (String) comboHistorial.getSelectedItem();
        if (textoAPI.getText().isEmpty() || !textoAPI.getText().equals(valor)) {
            if (!valor.isEmpty()) {
                textoAPI.setText(valor);
            }
        }
    }//GEN-LAST:event_comboHistorialActionPerformed

    public void ejecutarApi(String papi) {
        final String api = papi;
        EtiquetaEstado.setText("");
        textoLog.setText("");

    }

    private void cargarComboHistorial() {
        ArrayList comboBoxItems = new ArrayList();
        String dirhist = util.usuarioHome() + util.separador() + "documentumdfcs" + util.separador() + "documentum" + util.separador() + "shared" + util.separador() + "historial-api.log";
        BufferedReader br = null;

        try {
            String linea;
            br = new BufferedReader(new FileReader(dirhist));
            while ((linea = br.readLine()) != null) {
                comboBoxItems.add(linea);
            }
        } catch (IOException e) {
            Utilidades.escribeLog("Error al cargar el fichero de historial. (cargarComboHistorial) Error: " + e.getMessage());
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException ex) {
                Utilidades.escribeLog("Error al cerrar el fichero de historial. (cargarComboHistorial) Error: " + ex.getMessage());
            }
        }
        DefaultComboBoxModel modelo = new DefaultComboBoxModel(comboBoxItems.toArray());
        comboHistorial.setModel(modelo);
    }

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaApi(ventanapadre, true).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBorrarSalida;
    private javax.swing.JLabel EtiquetaEstado;
    private javax.swing.JButton botonConsultar;
    private javax.swing.JButton botonSalir;
    private javax.swing.JCheckBox checkMostrarSQL;
    private javax.swing.JCheckBox checkMulti;
    private javax.swing.JComboBox comboHistorial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelDatos;
    private javax.swing.JMenuItem opcionConsultar;
    private javax.swing.JMenuItem opcionCopiar;
    private javax.swing.JMenuItem opcionCopiarValor;
    private javax.swing.JMenuItem opcionPegar;
    private javax.swing.JMenuItem opcionSalir;
    private javax.swing.JMenu opciones;
    private javax.swing.JPanel panelAPI;
    private javax.swing.JPanel panelEstado;
    private javax.swing.JPopupMenu popupDatos;
    private javax.swing.JPopupMenu popupEditar;
    private javax.swing.JScrollPane scrollMultiAPI;
    private javax.swing.JTextField textoAPI;
    private javax.swing.JTextField textoDatosApi;
    private javax.swing.JTextArea textoLog;
    private javax.swing.JTextArea textoMultiAPI;
    // End of variables declaration//GEN-END:variables

    private void salir() {
        if (gsesion != null) {
            try {
                if (gsesion.isConnected()) {
                    gsesion.disconnect();
                }
            } catch (DfException ex) {
            }
        }
        this.dispose();
        System.gc();
    }

    private void popupmenu(MouseEvent evt) {
        if (evt.isPopupTrigger() || botonderecho) {
            botonderecho = false;
            if (evt.getSource().getClass().getName().equals("javax.swing.JTable")) {
                JTable source = (JTable) evt.getSource();
                int row = source.rowAtPoint(evt.getPoint());
                int column = source.columnAtPoint(evt.getPoint());
                if (!source.isRowSelected(row)) {
                    source.changeSelection(row, column, false, false);
                }

            }
            if (evt.getSource().getClass().getName().equals("javax.swing.JTextArea")) {
                popupEditar.show(evt.getComponent(), evt.getX(), evt.getY());
                opcionPegar.setEnabled(true);
            }
            if (evt.getSource() == textoLog) {
                //          popupEditar.show(evt.getComponent(), evt.getX(), evt.getY());
                opcionPegar.setEnabled(false);
            }

        }
    }

    private void ejecutarAPI(String ComandoApi, String datosApi) {
        String dirdfc = util.usuarioHome() + util.separador() + "documentumdfcs" + util.separador() + "documentum" + util.separador() + "shared" + util.separador();
//        try {
//            ClassPathUpdater.add(dirdfc);
//            ClassPathUpdater.add(dirdfc + "lib" + util.separador() + "jsafeFIPS.jar");
//        } catch (Exception ex) {
//            Utilidades.escribeLog("Error al actualizar el Classpath  - Error: " + ex.getMessage());
//        }
//        UtilidadesDocumentum utildocum = new UtilidadesDocumentum(dirdfc + "dfc.properties");
//        IDfSession sesion = utildocum.conectarDocumentum();

        Properties promensajes = new Properties();

        try {
            InputStream in = UtilidadesDocumentum.class.getClassLoader().getResourceAsStream("es/documentum/propiedades/mensajes-api.properties");
            if (in == null) {
                Utilidades.escribeLog("Error al cargar el fichero de propiedades de Documentum (cargarConfiguraciones)");
            }
            promensajes = new java.util.Properties();
            promensajes.load(in);
        } catch (IOException ex) {
            Utilidades.escribeLog("Error al cargar el fichero de propiedades. (cargarConfiguraciones) Error: " + ex.getMessage());
        }

        String apiCommand = ComandoApi;
        String apiDataCtl = datosApi;
        String batchStr;
        boolean abortScript = false;

        batchStr = apiCommand;
        //   String idControl = null;
        String lastId;
        String methodStr;
        String methodData = null;
        String status;
        String cmdResult = null;
        boolean b_result = false;
        String dummy;
        String dummyC = ",c,";
        String dummyCurrent = ",current,";

        int cmdId = 0;
        int cmdCallType = 0;
        int cmdSession = 0;

        int getCounter = 0;
        int execCounter = 0;
        int setCounter = 0;

        String currToken;

        StringBuilder resultsBuf = new StringBuilder(1024);
        try {
            lastId = idControl;
            if ((lastId != null) && (lastId.length() > 0)) {
                b_result = gsesion.apiExec("fetch", lastId);
            }
        } catch (DfException exp) {
        }
        if ((batchStr != null) && (batchStr.length() != 0)) {
            StringTokenizer batchTokener = new StringTokenizer(batchStr, "\n\r");
            while ((batchTokener.hasMoreTokens()) && (abortScript != true)) {
                methodStr = batchTokener.nextToken();
                if ((methodStr == null) && (batchTokener.hasMoreTokens())) {
                    methodStr = batchTokener.nextToken();
                }
                StringTokenizer lineTokener = new StringTokenizer(methodStr, ",");

                String methodStr1 = lineTokener.nextToken();
                if ((methodStr1.equals("connect")) || (methodStr1.indexOf(" ") > -1)) {
                    resultsBuf.append(promensajes.getProperty("MSG_API") + methodStr1);
                    if (methodStr1.equals("connect")) {
                        resultsBuf.append("\n...\n" + promensajes.getProperty("MSG_NO_CONNECT") + "\n");
                    } else {
                        resultsBuf.append("\n...\n" + promensajes.getProperty("MSG_API_NOT_VALID") + "\n");
                    }
                } else {
                    String methodStr2 = null;
                    if (lineTokener.hasMoreTokens()) {
                        dummy = lineTokener.nextToken();
                        if (lineTokener.hasMoreTokens()) {
                            if ((dummy != null) && (dummy.length() > 0)) {
                                int index = 0;
                                if (dummy.equalsIgnoreCase("current")) {
                                    index = methodStr.toLowerCase().indexOf(dummyCurrent);
                                } else if (dummy.equalsIgnoreCase("c")) {
                                    index = methodStr.toLowerCase().indexOf(dummyC);
                                }
                                methodStr2 = methodStr.substring(index + dummy.length() + 2);
                            }
                        }
                    }
                    resultsBuf.append(promensajes.getProperty("MSG_API") + methodStr);
                    try {
                        IDfList list = gsesion.apiDesc(methodStr1 + ",c,");
                        status = list.getString(0);
                        cmdId = list.getInt(1);
                        cmdCallType = list.getInt(2);
                        cmdSession = list.getInt(3);
                        switch (cmdCallType) {
                            case 0:
                                if ((methodStr1.equals("getservermap")) || (methodStr1.equals("getdocbasemap"))) {
                                    StringTokenizer tokenizer = null;
                                    if ((methodStr2 != null) && (methodStr2.length() > 0)) {
                                        tokenizer = new StringTokenizer(methodStr2, ",");
                                    }
                                    if ((tokenizer == null) || (tokenizer.countTokens() <= 1)) {
                                        String strDocbroker = utildocum.DameDocbroker();
                                        String docbrokerPort = utildocum.DamePuertoDocbroker();
                                        StringBuffer additionalParamBuffer = new StringBuffer();
                                        if ((methodStr2 != null) && (methodStr2.length() > 0)) {
                                            additionalParamBuffer.append(",");
                                        }
                                        additionalParamBuffer.append(",");
                                        additionalParamBuffer.append(strDocbroker);
                                        additionalParamBuffer.append(",");
                                        additionalParamBuffer.append(docbrokerPort);
                                        if ((methodStr2 != null) && (methodStr2.length() > 0)) {
                                            methodStr2 = methodStr2 + additionalParamBuffer.toString();
                                        } else {
                                            methodStr2 = additionalParamBuffer.toString();
                                        }
                                    }
                                }
                                cmdResult = gsesion.apiGet(methodStr1, methodStr2);
                                if ((methodStr1.equals("create")) || (methodStr1.equals("checkin")) || (methodStr1.equals("retrieve")) || (methodStr1.equals("id")) || (methodStr1.equals("getdocbasemap")) || (methodStr1.equals("getservermap")) || (methodStr1.equals("getdocbrokermap"))) {
                                    if (cmdResult != null) {
                                        if (cmdResult.length() != 16) {
                                            abortScript = true;
                                            if (checkMulti.isSelected()) {
                                                resultsBuf.append("\n\n" + promensajes.getProperty("MSG_SCRIPT_ABORTED") + "\n\n");
                                            }
                                            lastId = "";
                                            idControl = "";
                                        } else {
                                            if ((setCounter + execCounter > 0) && (!methodStr1.equals("checkin"))) {
                                            }
                                            lastId = cmdResult;
                                            idControl = cmdResult;
                                        }
                                        execCounter = 0;
                                        setCounter = 0;
                                    } else {
                                        String errorMessage = gsesion.apiGet("getmessage", null);
                                        resultsBuf.append(errorMessage);
                                    }
                                }
                                getCounter++;
                                break;
                            case 1:
                                if (checkMulti.isSelected()) {
                                    if (batchTokener.hasMoreTokens()) {
                                        methodData = batchTokener.nextToken();
                                    }
                                } else {
                                    methodData = apiDataCtl;
                                }

                                b_result = gsesion.apiSet(methodStr1, methodStr2, methodData);

                                resultsBuf.append("\n" + promensajes.getProperty("MSG_SET") + methodData);
                                if (b_result) {
                                    cmdResult = promensajes.getProperty("MSG_OK");
                                    setCounter++;
                                } else {
                                    abortScript = true;
                                    if (checkMulti.isSelected()) {
                                        resultsBuf.append("\n\n" + promensajes.getProperty("MSG_SCRIPT_ABORTED") + "\n\n");
                                    }
                                    setCounter = 0;
                                }
                                break;
                            case 2:
                                b_result = gsesion.apiExec(methodStr1, methodStr2);
                                if (b_result) {
                                    if (methodStr1.equals("fetch")) {
                                        lastId = methodStr2;
                                        idControl = methodStr2;
                                    }
                                    cmdResult = promensajes.getProperty("MSG_OK");
                                    if (methodStr1.equals("save")) {
                                        execCounter = 0;
                                        setCounter = 0;
                                    } else {
                                        execCounter++;
                                    }
                                } else {
                                    abortScript = true;
                                    if (checkMulti.isSelected()) {
                                        resultsBuf.append("\n\n" + promensajes.getProperty("MSG_SCRIPT_ABORTED") + "\n\n");
                                    }
                                    execCounter = 0;
                                    setCounter = 0;
                                }
                                break;
                        }
                        b_result = false;
                    } catch (Exception exp) {
                        cmdResult = promensajes.getProperty("MSG_ERROR_PROCESSING") + exp.toString();
                        abortScript = true;
                        if (checkMulti.isSelected()) {
                            cmdResult = cmdResult + "\n\n" + promensajes.getProperty("MSG_SCRIPT_ABORTED") + "\n\n";
                        }
                    } finally {
                        resultsBuf.append("\n...\n" + cmdResult + "\n");
                    }
                }
            }
            if (setCounter + execCounter > 0) {
            }
            String output = textoLog.getText();
            String lastResults = output;

            if (!checkMulti.isSelected() && checkMostrarSQL.isSelected()) {
                resultsBuf.append("\n" + promensajes.getProperty("MSG_SQL_QUERY") + "\n" + getSqlQuery(gsesion) + "\n\n");
            }
            resultsBuf.append(lastResults);
            output = resultsBuf.toString();
            textoLog.setText(output);
            textoLog.setCaretPosition(0);
            if (!BuscarEnComboHistorial(textoAPI.getText())) {
                try {
                    FileOutputStream historial = new FileOutputStream(new File(dirdfc + "historial-api.log"), true);
                    historial.write(("\n" + textoAPI.getText().replaceAll("(\r\n|\n)", " ")).getBytes());
                    historial.close();
                    cargarComboHistorial();
                } catch (IOException ex) {
                }
            }
        }

    }

    private Boolean BuscarEnComboHistorial(String texto) {
        DefaultComboBoxModel model = (DefaultComboBoxModel) comboHistorial.getModel();
//        return (model.getIndexOf(texto) > 0);
        return (buscarEnCombo(model, texto.trim()) != -1);
    }

    private int buscarEnCombo(DefaultComboBoxModel modelo, String cadena) {
        if (modelo != null) {
            for (int i = 0; i < modelo.getSize(); i++) {
                if (cadena.equalsIgnoreCase(modelo.getElementAt(i).toString().trim())) {
                    return i;
                }
            }
        } else {
            return 0;
        }
        return -1;
    }

    private String getSqlQuery(IDfSession lsesion) {
        String sqlResult = null;
        try {
            String collId = lsesion.apiGet("apply", "NULL,GET_LAST_SQL");
            if (!collId.equals("")) {
                lsesion.apiExec("next", collId);
                sqlResult = lsesion.apiGet("get", collId + ",result");
                lsesion.apiExec("close", collId);
            }
        } catch (DfException exp) {
            ;
        }
        return sqlResult;
    }

    private void pintarMulti(boolean multi) {
        if (multi) {
            scrollMultiAPI.setVisible(true);
            textoMultiAPI.setVisible(true);
            textoAPI.setVisible(false);
            comboHistorial.setVisible(false);
            labelDatos.setVisible(false);
            textoDatosApi.setVisible(false);
            checkMostrarSQL.setVisible(false);
        } else {
            scrollMultiAPI.setVisible(false);
            textoMultiAPI.setVisible(false);
            textoAPI.setVisible(true);
            comboHistorial.setVisible(true);
            labelDatos.setVisible(true);
            textoDatosApi.setVisible(true);
            checkMostrarSQL.setVisible(true);
        }
    }

}
