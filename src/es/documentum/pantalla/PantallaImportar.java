package es.documentum.pantalla;

import com.documentum.fc.client.DfClient;
import com.documentum.fc.client.IDfClient;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfFolder;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfSysObject;
import com.documentum.fc.client.IDfTypedObject;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.DfLoginInfo;
import com.documentum.fc.common.IDfLoginInfo;
import com.documentum.fc.common.IDfValue;
import com.documentum.fc.impl.util.RegistryPasswordUtils;
import com.google.common.io.Files;
import es.documentum.utilidades.ClassPathUpdater;
import es.documentum.utilidades.Utilidades;
import static es.documentum.utilidades.Utilidades.escribeLog;
import es.documentum.utilidades.UtilidadesDocumentum;
import static es.documentum.utilidades.UtilidadesDocumentum.getDfObjectValue;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.StringTokenizer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;

public class PantallaImportar extends javax.swing.JDialog {

    Utilidades util = new Utilidades();
    PantallaBarra barradocum = null;
    Boolean botonderecho = false;
    String componente = "";
    String tipodocumental = "dm_document";
    UtilidadesDocumentum utilidadesdocumentum;
    String dirSSOO = "";
    String rutadcm;
    IDfSession sesion = conectarDocumentum();

    public String getRutadcm() {
        return this.textoCarpetaDocumentum.getText();
    }

    public void setRutadcm(String rutadcm) {
        this.textoCarpetaDocumentum.setText(rutadcm);
    }
    public static PantallaDocumentum ventanapadre = null;

    public PantallaImportar(PantallaDocumentum parent, boolean modal) {
        ventanapadre = parent;
        initComponents();
        try {
            setIconImage(new ImageIcon(getLogo()).getImage());
        } catch (NullPointerException e) {
            Utilidades.escribeLog("\nError cargando el Logo " + e.getMessage() + "\n");
        }
        inicializar();
        setLocationRelativeTo(null);
        cargarComboTipos();
    }

    private void inicializar() {
        String dirdfc = util.usuarioHome() + util.separador() + "documentumdfcs" + util.separador() + "documentum" + util.separador() + "shared" + util.separador();
        try {
            ClassPathUpdater.add(dirdfc);
            ClassPathUpdater.add(dirdfc + "lib" + util.separador() + "jsafeFIPS.jar");
        } catch (IOException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex) {
            Utilidades.escribeLog("Error al actualizar el Classpath  - Error: " + ex.getMessage());
        }
        utilidadesdocumentum = new UtilidadesDocumentum(dirdfc + "dfc.properties");
        rBFichero.setSelected(true);
        checkCrearDir.setVisible(false);
    }

    protected static Image getLogo() {
        java.net.URL imgURL = PantallaImportar.class.getClassLoader().getResource("es/documentum/imagenes/document-import.png");
        if (imgURL != null) {
            return new ImageIcon(imgURL).getImage();
        } else {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupEditar = new javax.swing.JPopupMenu();
        opcionCopiar = new javax.swing.JMenuItem();
        opcionPegar = new javax.swing.JMenuItem();
        popupDatos = new javax.swing.JPopupMenu();
        opcionCopiarValor = new javax.swing.JMenuItem();
        opcionExportarExcel = new javax.swing.JMenuItem();
        popupHistorial = new javax.swing.JPopupMenu();
        opcionVaciarHistorial = new javax.swing.JMenuItem();
        panelImportar = new javax.swing.JPanel();
        labelFicheroImportar = new javax.swing.JLabel();
        comboTipoDocumental = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textoFichero = new javax.swing.JTextField();
        textoCarpetaDocumentum = new javax.swing.JTextField();
        botonSelFichero = new javax.swing.JButton();
        labelNombreFichero = new javax.swing.JLabel();
        textoNombreFichero = new javax.swing.JTextField();
        rBFichero = new javax.swing.JRadioButton();
        rBDirectorio = new javax.swing.JRadioButton();
        checkCrearDir = new javax.swing.JCheckBox();
        panelEstado = new javax.swing.JPanel();
        textoLog = new javax.swing.JTextField();
        botonEjecutar = new javax.swing.JButton();
        botonSalir = new javax.swing.JButton();
        menuPrincipal = new javax.swing.JMenuBar();
        menuOpciones = new javax.swing.JMenu();
        opcionEjecutar = new javax.swing.JMenuItem();
        opcionSalir = new javax.swing.JMenuItem();

        opcionCopiar.setText("Copiar Ctrl+C");
        opcionCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCopiarActionPerformed(evt);
            }
        });
        popupEditar.add(opcionCopiar);

        opcionPegar.setText("Pegar  Ctrl+V");
        opcionPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionPegarActionPerformed(evt);
            }
        });
        popupEditar.add(opcionPegar);

        opcionCopiarValor.setText("Copiar Valor");
        opcionCopiarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCopiarValorActionPerformed(evt);
            }
        });
        popupDatos.add(opcionCopiarValor);

        opcionExportarExcel.setText("Exportar a Excel");
        opcionExportarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionExportarExcelActionPerformed(evt);
            }
        });
        popupDatos.add(opcionExportarExcel);

        opcionVaciarHistorial.setText("Vaciar Historial de DQL");
        opcionVaciarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionVaciarHistorialActionPerformed(evt);
            }
        });
        popupHistorial.add(opcionVaciarHistorial);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Importar Archivos a Documentum");
        setMinimumSize(new java.awt.Dimension(565, 307));
        setResizable(false);

        panelImportar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelFicheroImportar.setText("Fichero a Importar");

        comboTipoDocumental.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                comboTipoDocumentalMousePressed(evt);
            }
        });
        comboTipoDocumental.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoDocumentalActionPerformed(evt);
            }
        });

        jLabel3.setText("Carpeta destino en Documentum");

        jLabel4.setText("Tipo Documental Documentum");

        textoFichero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoFicheroActionPerformed(evt);
            }
        });

        botonSelFichero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/carpeta.png"))); // NOI18N
        botonSelFichero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSelFicheroActionPerformed(evt);
            }
        });

        labelNombreFichero.setText("Nombre del fichero");

        textoNombreFichero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoNombreFicheroActionPerformed(evt);
            }
        });

        rBFichero.setText("Fichero");
        rBFichero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBFicheroActionPerformed(evt);
            }
        });

        rBDirectorio.setText("Directorio");
        rBDirectorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBDirectorioActionPerformed(evt);
            }
        });

        checkCrearDir.setText("Crear directorio");

        javax.swing.GroupLayout panelImportarLayout = new javax.swing.GroupLayout(panelImportar);
        panelImportar.setLayout(panelImportarLayout);
        panelImportarLayout.setHorizontalGroup(
            panelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImportarLayout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addGroup(panelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(textoCarpetaDocumentum)
                        .addComponent(comboTipoDocumental, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panelImportarLayout.createSequentialGroup()
                            .addGroup(panelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(panelImportarLayout.createSequentialGroup()
                                    .addComponent(labelFicheroImportar, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(53, 53, 53)
                                    .addComponent(rBFichero, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(rBDirectorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(textoFichero, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(botonSelFichero, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelImportarLayout.createSequentialGroup()
                            .addComponent(labelNombreFichero, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(54, 54, 54)
                            .addComponent(checkCrearDir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(textoNombreFichero, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55))
        );
        panelImportarLayout.setVerticalGroup(
            panelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImportarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFicheroImportar)
                    .addComponent(rBFichero)
                    .addComponent(rBDirectorio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textoFichero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonSelFichero))
                .addGroup(panelImportarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelImportarLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(labelNombreFichero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(panelImportarLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkCrearDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(textoNombreFichero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoCarpetaDocumentum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboTipoDocumental, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        panelEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        textoLog.setEditable(false);
        textoLog.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        textoLog.setForeground(new java.awt.Color(0, 51, 204));
        textoLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                textoLogMousePressed(evt);
            }
        });
        textoLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoLogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEstadoLayout = new javax.swing.GroupLayout(panelEstado);
        panelEstado.setLayout(panelEstadoLayout);
        panelEstadoLayout.setHorizontalGroup(
            panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textoLog, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        panelEstadoLayout.setVerticalGroup(
            panelEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textoLog, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        botonEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/ejecutar_peq.png"))); // NOI18N
        botonEjecutar.setText("Ejecutar");
        botonEjecutar.setMaximumSize(new java.awt.Dimension(100, 40));
        botonEjecutar.setMinimumSize(new java.awt.Dimension(100, 40));
        botonEjecutar.setPreferredSize(new java.awt.Dimension(100, 40));
        botonEjecutar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                botonEjecutarMousePressed(evt);
            }
        });
        botonEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEjecutarActionPerformed(evt);
            }
        });

        botonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/salir_peq.png"))); // NOI18N
        botonSalir.setText("Salir");
        botonSalir.setMaximumSize(new java.awt.Dimension(100, 40));
        botonSalir.setMinimumSize(new java.awt.Dimension(100, 40));
        botonSalir.setPreferredSize(new java.awt.Dimension(100, 40));
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        menuOpciones.setText("Opciones");

        opcionEjecutar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        opcionEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/ejecutar_peq.png"))); // NOI18N
        opcionEjecutar.setText("Ejecutar");
        opcionEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionEjecutarActionPerformed(evt);
            }
        });
        menuOpciones.add(opcionEjecutar);

        opcionSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        opcionSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/salir_peq.png"))); // NOI18N
        opcionSalir.setText("Salir");
        opcionSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionSalirActionPerformed(evt);
            }
        });
        menuOpciones.add(opcionSalir);

        menuPrincipal.add(menuOpciones);

        setJMenuBar(menuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(botonEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 403, Short.MAX_VALUE)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(panelImportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {botonEjecutar, botonSalir});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelImportar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {botonEjecutar, botonSalir});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importarDirectorio() {
        new Thread() {
            @Override
            public void run() {
                Utilidades.escribeLog("Inicio Importar directorio " + textoFichero.getText() + " en " + textoCarpetaDocumentum.getText());
                dirSSOO = textoFichero.getText();
                panelImportar.setEnabled(false);
                botonEjecutar.setEnabled(false);
                botonSalir.setEnabled(false);
                opcionEjecutar.setEnabled(false);
                opcionSalir.setEnabled(false);
                barradocum = new PantallaBarra(PantallaImportar.this, false);
                barradocum.setTitle("Importando en Documentum ...");
                PantallaBarra.barra.setIndeterminate(true);
                barradocum.botonParar.setVisible(true);
                barradocum.setLabelMensa("");
                PantallaBarra.barra.setOpaque(true);
                PantallaBarra.barra.setStringPainted(false);
                barradocum.validate();
                barradocum.setVisible(true);
                ImportarDirEnDcm(PantallaImportar.this.dirSSOO);
                panelImportar.setEnabled(true);
                botonEjecutar.setEnabled(true);
                botonSalir.setEnabled(true);
                opcionEjecutar.setEnabled(true);
                opcionSalir.setEnabled(true);
                barradocum.dispose();
                ventanapadre.buscarEnDocumentum();
                dispose();
                checkCrearDir.setEnabled(true);
                Utilidades.escribeLog("Fin Importar directorio " + textoFichero.getText() + " en " + textoCarpetaDocumentum.getText());
            }
        }.start();
    }


    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        salir();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void botonEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEjecutarActionPerformed
        if (comprobarValores()) {
            if (this.rBFichero.isSelected()) {
                Utilidades.escribeLog("Inicio Importar fichero " + textoFichero.getText());
                subirADocumentum();
                Utilidades.escribeLog("Fin Importar fichero " + textoFichero.getText());
            } else {
                importarDirectorio();
            }
        }
    }//GEN-LAST:event_botonEjecutarActionPerformed

    private void opcionEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionEjecutarActionPerformed
        if (comprobarValores()) {
            if (this.rBFichero.isSelected()) {
                Utilidades.escribeLog("Inicio Importar fichero" + textoFichero.getText());
                subirADocumentum();
                Utilidades.escribeLog("Fin Importar fichero" + textoFichero.getText());
            } else {
                importarDirectorio();
            }
        }
    }//GEN-LAST:event_opcionEjecutarActionPerformed

    private void opcionSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionSalirActionPerformed
        salir();
    }//GEN-LAST:event_opcionSalirActionPerformed

    private void opcionCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCopiarActionPerformed
        if (componente.equals("textoLog")) {
            if (textoLog.getSelectedText() == null) {
                Utilidades.copiarTextoPortapapeles(textoLog.getText());
            } else {
                Utilidades.copiarTextoPortapapeles(textoLog.getSelectedText());
            }
        }
    }//GEN-LAST:event_opcionCopiarActionPerformed

    private void opcionPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionPegarActionPerformed
    }//GEN-LAST:event_opcionPegarActionPerformed

    private void opcionCopiarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCopiarValorActionPerformed

    }//GEN-LAST:event_opcionCopiarValorActionPerformed

    private void opcionExportarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionExportarExcelActionPerformed

    }//GEN-LAST:event_opcionExportarExcelActionPerformed

    private void comboTipoDocumentalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoDocumentalActionPerformed
        tipodocumental = (String) comboTipoDocumental.getSelectedItem();

    }//GEN-LAST:event_comboTipoDocumentalActionPerformed

    private void comboTipoDocumentalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboTipoDocumentalMousePressed

    }//GEN-LAST:event_comboTipoDocumentalMousePressed

    private void opcionVaciarHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionVaciarHistorialActionPerformed

    }//GEN-LAST:event_opcionVaciarHistorialActionPerformed

    private void textoFicheroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoFicheroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoFicheroActionPerformed

    private void botonSelFicheroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSelFicheroActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("/"));
        if (rBFichero.isSelected()) {
            chooser.setDialogTitle("Seleccionar fichero a importar");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                textoFichero.setText(chooser.getSelectedFile().toString());
                textoNombreFichero.setText(chooser.getSelectedFile().getName());
            } else {
                Utilidades.escribeLog("No se ha seleccionado el fichero de salida ");
            }
        } else {
            chooser.setDialogTitle("Seleccionar Directorio a importar");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                textoFichero.setText(chooser.getSelectedFile().toString());
            } else {
                Utilidades.escribeLog("No se ha seleccionado el directorio a importar");
            }
        }
    }//GEN-LAST:event_botonSelFicheroActionPerformed

    private void textoNombreFicheroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoNombreFicheroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoNombreFicheroActionPerformed

    private void textoLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoLogActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoLogActionPerformed

    private void textoLogMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textoLogMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            botonderecho = true;
            componente = "textoLog";
            popupmenu(evt);
        }

    }//GEN-LAST:event_textoLogMousePressed

    private void rBDirectorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBDirectorioActionPerformed
        rBFichero.setSelected(false);
        labelFicheroImportar.setText("Directorio a Importar");
        labelNombreFichero.setEnabled(false);
        textoNombreFichero.setEnabled(false);
        checkCrearDir.setVisible(true);
    }//GEN-LAST:event_rBDirectorioActionPerformed

    private void rBFicheroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBFicheroActionPerformed
        rBDirectorio.setSelected(false);
        labelFicheroImportar.setText("Fichero a Importar");
        labelNombreFichero.setEnabled(true);
        textoNombreFichero.setEnabled(true);
        checkCrearDir.setVisible(false);
    }//GEN-LAST:event_rBFicheroActionPerformed

    private void botonEjecutarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonEjecutarMousePressed
        textoLog.setText("Importando fichero en Documentum ...");
        textoLog.validate();
    }//GEN-LAST:event_botonEjecutarMousePressed

    private void popupmenu(MouseEvent evt) {
        if (evt.isPopupTrigger() || botonderecho) {
            botonderecho = false;

            if (evt.getSource() == textoLog) {
                opcionPegar.setEnabled(false);
                popupEditar.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }

    private Boolean comprobarValores() {
        Boolean correcto = true;

        if (rBFichero.isSelected()) {
            if (textoFichero.getText().isEmpty()) {
                textoLog.setText("Debe indicar el fichero a importar");
                textoFichero.requestFocus();
                return false;
            }

            if (textoNombreFichero.getText().isEmpty()) {
                textoLog.setText("Debe indicar un nombre de fichero");
                textoNombreFichero.requestFocus();
                return false;
            }
        } else {
            if (textoFichero.getText().isEmpty()) {
                textoLog.setText("Debe indicar el directorio del Sistema Operativo a importar");
                textoFichero.requestFocus();
                return false;
            }
        }

        if (textoCarpetaDocumentum.getText().isEmpty()) {
            textoLog.setText("Debe indicar una carpeta de destino en Documentum");
            textoCarpetaDocumentum.requestFocus();
            return false;
        }

        if (ventanapadre.utilDocum.existeCarpeta(textoCarpetaDocumentum.getText()) == false) {
            textoLog.setText("La carpeta indicada parece que no existe en Documentum");
            textoCarpetaDocumentum.requestFocus();
            return false;
        }
        return correcto;
    }

    private void cargarComboTipos() {
        ArrayList comboBoxItems = new ArrayList();
        int posicion = 0;

        try {
            //            IDfCollection col = utildocum.ejecutarDql("select name from dm_type where  super_name in ('dm_document') or name in ('dm_document') order by name");
            IDfCollection col = utilidadesdocumentum.ejecutarDql("select name from dm_type order by name", sesion);
            if (!utilidadesdocumentum.dameError().equals("")) {
                textoLog.setText(utilidadesdocumentum.dameError());
                barradocum.dispose();
                return;
            }

            while (col.next()) {
                IDfTypedObject row = (IDfTypedObject) col.getTypedObject();
                IDfValue attrValue = row.getValue("name");
                comboBoxItems.add(getDfObjectValue(attrValue));
                if (getDfObjectValue(attrValue).equals("dm_document")) {
                    posicion = comboBoxItems.size() - 1;
                }
            }

            col.close();

        } catch (DfException e) {
            textoLog.setText("Error - " + e.getMessage());
        }

        DefaultComboBoxModel modelo = new DefaultComboBoxModel(comboBoxItems.toArray());
        comboTipoDocumental.setModel(modelo);
        if (modelo.getSize() > 0) {
            comboTipoDocumental.setSelectedIndex(posicion);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            escribeLog("Error al establecer el estilo de la ventana. Error: " + ex.getMessage());
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PantallaImportar(ventanapadre, true).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonEjecutar;
    private javax.swing.JButton botonSalir;
    private javax.swing.JButton botonSelFichero;
    private javax.swing.JCheckBox checkCrearDir;
    private javax.swing.JComboBox comboTipoDocumental;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel labelFicheroImportar;
    private javax.swing.JLabel labelNombreFichero;
    private javax.swing.JMenu menuOpciones;
    private javax.swing.JMenuBar menuPrincipal;
    private javax.swing.JMenuItem opcionCopiar;
    private javax.swing.JMenuItem opcionCopiarValor;
    private javax.swing.JMenuItem opcionEjecutar;
    private javax.swing.JMenuItem opcionExportarExcel;
    private javax.swing.JMenuItem opcionPegar;
    private javax.swing.JMenuItem opcionSalir;
    private javax.swing.JMenuItem opcionVaciarHistorial;
    private javax.swing.JPanel panelEstado;
    private javax.swing.JPanel panelImportar;
    private javax.swing.JPopupMenu popupDatos;
    private javax.swing.JPopupMenu popupEditar;
    private javax.swing.JPopupMenu popupHistorial;
    private javax.swing.JRadioButton rBDirectorio;
    private javax.swing.JRadioButton rBFichero;
    private javax.swing.JTextField textoCarpetaDocumentum;
    private javax.swing.JTextField textoFichero;
    private javax.swing.JTextField textoLog;
    private javax.swing.JTextField textoNombreFichero;
    // End of variables declaration//GEN-END:variables

    private void salir() {
        this.dispose();
    }

    private void subirADocumentum() {
        textoLog.setText(utilidadesdocumentum.importarADocumentum(textoNombreFichero.getText(), textoFichero.getText(), textoCarpetaDocumentum.getText(), tipodocumental));
        PantallaImportar.ventanapadre.actualizarTablaDocumentos(textoCarpetaDocumentum.getText());
    }

    public void ImportarDirEnDcm(String rutaSO) {
        File dir = new File(rutaSO);
        String directorio = dir.getName();
        if (checkCrearDir.isEnabled() && checkCrearDir.isSelected()) {
            textoCarpetaDocumentum.setText(textoCarpetaDocumentum.getText() + "/" + directorio);
            String nuevarutaDocum = textoCarpetaDocumentum.getText();
            this.textoLog.setText("Creando carpeta " + nuevarutaDocum + " ... ");
            this.barradocum.setLabelMensa("Creando carpeta " + nuevarutaDocum + " ... ");
            IDfFolder nuevafolder = crearCarpeta(nuevarutaDocum);
            this.textoLog.setText("Creada carpeta " + nuevarutaDocum);
            checkCrearDir.setEnabled(false);
        }
        File[] listFile = dir.listFiles();
        if (listFile != null) {
            for (int i = 0; i < listFile.length; i++) {
                String ruta = listFile[i].getPath().replace("\\", "/");
                if (listFile[i].isDirectory()) {
                    String nueva = ruta.substring(this.dirSSOO.length() + 1, ruta.length());
                    String nombreDir = this.textoCarpetaDocumentum.getText() + (nueva.equals("/") ? "" : new StringBuilder().append("/").append(nueva).toString());

                    this.textoLog.setText("Creando carpeta " + nombreDir + " ... ");
                    this.barradocum.setLabelMensa("Creando carpeta " + nombreDir + " ... ");
                    IDfFolder folder = crearCarpeta(nombreDir);
                    this.textoLog.setText("Creada carpeta " + nombreDir);
                    this.barradocum.setLabelMensa("Creada carpeta " + nombreDir);
                    this.panelEstado.repaint();
                    ImportarDirEnDcm(listFile[i].getPath().replace("\\", "/"));
                } else {
                    String nombre = listFile[i].getName().replace("\\", "/");
                    String nueva = ruta.substring(this.dirSSOO.length() + 1, ruta.length() - nombre.length());
                    nueva = nueva.endsWith("/") ? nueva.substring(0, nueva.length() - 1) : nueva;
                    String rutaDocum = this.textoCarpetaDocumentum.getText() + ((nueva.equals("/")) || (nueva.equals("")) ? "" : new StringBuilder().append("/").append(nueva).toString());

                    this.barradocum.setLabelMensa("Creando documento " + nombre + " ... ");
                    this.textoLog.setText("Creando documento " + nombre + " ... ");
                    String id = importarADocumentum(nombre, listFile[i].getPath(), rutaDocum, this.tipodocumental);
                    this.textoLog.setText("Creado documento " + nombre + " - ID: " + id);
                    this.barradocum.setLabelMensa("Creado documento " + nombre + " - ID: " + id);
                    this.panelEstado.repaint();
                }
                if (this.barradocum.getPARAR()) {
                    this.barradocum.setPARAR(false);
                    return;
                }
            }
        }
    }

    public IDfFolder crearCarpeta(String path) {
        if (sesion == null) {
            return null;
        }

        IDfFolder folder = null;
        try {
            folder = sesion.getFolderByPath(path);
            if (folder != null) {
                return folder;
            }

            int slashIndex = path.lastIndexOf('/');
            String name = path.substring(slashIndex + 1);
            String parent = path.substring(0, slashIndex);
            synchronized (("lock-" + path).intern()) {
                folder = sesion.getFolderByPath(path);
                if (folder != null) {
                    return folder;
                }
                if ("".equals(parent) || "/".equals(parent)) {
                    folder = (IDfFolder) sesion.newObject("dm_cabinet");
                    folder.setObjectName(name);
                    folder.save();
                } else {
                    crearCarpeta(parent);
                    folder = (IDfFolder) sesion.newObject("dm_folder");
                    folder.setObjectName(name);
                    folder.link(parent);
                    folder.save();
                }
            }
        } catch (DfException ex) {
            Utilidades.escribeLog("Error al crear carpeta en Documentum () - Error: " + ex.getMessage());
        }

        return folder;
    }

    public String importarADocumentum(String nombrefichero, String rutafichero, String carpetadocumentum, String tipodocumental) {
        Utilidades pc = new Utilidades();
        String ERROR = "";
        if (sesion == null) {
            return "No se pudo obtener sesión de Documentum (importarADocumentum)";
        }

        try {
            IDfSysObject sysObj = (IDfSysObject) sesion.newObject(tipodocumental);
            sysObj.setObjectName(nombrefichero);
            String tipo = dameTipo(rutafichero);
            if (tipo.equals("-1") || tipo.isEmpty()) {
                Utilidades.escribeLog("Error - Imposible obtener el tipo de documento en Documentum para la extensión de este archivo");
            } else {
                sysObj.setContentType(tipo);
                sysObj.setFile(rutafichero);
                IDfFolder carpeta = dameCarpeta(carpetadocumentum);
                sysObj.link(carpetadocumentum);
                sysObj.setString("title", nombrefichero);
                sysObj.setRepeatingString("authors", 0, pc.usuario());
                sysObj.save();
            }
        } catch (DfException e) {
            ERROR = e.getMessage();
        }
        return ERROR;
    }

    private String dameTipo(String fichero) {
        String tipo = "";
        String extension = Files.getFileExtension(fichero);

        switch (extension) {
            case "txt":
                tipo = "crtext";
                break;
            case "xls":
                tipo = "excel8book";
                break;
            case "doc":
                tipo = "msw8";
                break;
            case "ppt":
                tipo = "ppt8";
                break;
            case "vsd":
                tipo = "vsd";
                break;
            case "zip":
                tipo = "zip";
                break;
            case "wpd":
                tipo = "wp8";
                break;
            case "psd":
                tipo = "photoshop6";
                break;
            case "au":
                tipo = "audio";
                break;
            case "jpeg":
                tipo = "jpeg";
                break;
            case "jpg":
                tipo = "jpeg";
                break;
            case "html":
                tipo = "html";
                break;
            case "htm":
                tipo = "html";
                break;
            case "ai":
                tipo = "illustrator10";
                break;
            default:
                try {
                    IDfCollection col = utilidadesdocumentum.ejecutarDql("SELECT name from dm_format WHERE dos_extension = lower('" + extension + "')", sesion);
                    col.next();
                    IDfTypedObject row = (IDfTypedObject) col.getTypedObject();
                    IDfValue attrValue = row.getValue("name");
                    tipo = getDfObjectValue(attrValue).toString();
                    col.close();
                } catch (Exception e) {
                    tipo = "unknown";
                }
        }
        return tipo;
    }

    public IDfFolder dameCarpeta(String nombre) {
        if (sesion == null) {
            return null;
        }

        IDfFolder carpeta = null;
        String dirbase = "";
        String dir = dirbase;
        IDfFolder carpetaraiz = null;
        StringTokenizer path = new StringTokenizer(nombre, "/");
        while (path.hasMoreElements()) {
            try {
                carpetaraiz = (IDfFolder) sesion.getObjectByPath(dirbase);
            } catch (DfException ex) {
                Utilidades.escribeLog("Error al recuperar directorio raiz " + dirbase + " Error - " + ex.getMessage());
                return null;
            }
            dir = path.nextElement().toString();
            try {
                carpeta = sesion.getFolderByPath(dirbase + "/" + dir);
                if (carpeta == null) {
                    carpeta = (IDfFolder) sesion.newObject("dm_folder");
                    carpeta.setObjectName(dir);
                    carpeta.link(dirbase);
                    carpeta.save();
                }
            } catch (DfException ex1) {
                Utilidades.escribeLog("Error al crear el directorio " + dirbase + "/" + dir + ". - " + ex1.getMessage());
            }
            dirbase = dirbase + "/" + dir;
        }
        return carpeta;
    }

    public IDfSession conectarDocumentum() {
        Properties pro = new Properties();
        Properties proapp = new Properties();
        String dirdfc = util.usuarioHome() + util.separador() + "documentumdfcs" + util.separador() + "documentum" + util.separador() + "shared" + util.separador();
        String ficheropropiedades = dirdfc + util.separador() + "dfc.properties";
        String ficheropropapp = dirdfc + util.separador() + "DocumentumDFCs.properties";
        try {
            InputStream in = new FileInputStream(ficheropropiedades);
            if (in == null) {
                Utilidades.escribeLog("Error al cargar el fichero de propiedades de Documentum (cargarConfiguraciones)");
            }
            InputStream inapp = new FileInputStream(ficheropropapp);
            if (inapp == null) {
                Utilidades.escribeLog("Error al cargar el fichero de propiedades de Documentum (cargarConfiguraciones)");
            }
            pro = new java.util.Properties();
            pro.load(in);
            proapp = new java.util.Properties();
            proapp.load(inapp);

        } catch (IOException ex) {
            Utilidades.escribeLog("Error al cargar el fichero de propiedades. (cargarConfiguraciones) Error: " + ex.getMessage());
        }
        String usuario = proapp.getProperty("usuario");
        String password = "";
        try {
            password = RegistryPasswordUtils.decrypt(proapp.getProperty("password"));
        } catch (Exception ex) {
        }
        String docbase = proapp.getProperty("repositorio");
        String docbroker = pro.getProperty("dfc.docbroker.host[0]");
        String puerto = pro.getProperty("dfc.docbroker.port[0]");
//        System.out.println(usuario + " - " + password + " - " + docbase + " - " + docbroker);

        IDfSession sesion = null;

        if (puerto == null || docbroker == null || puerto.isEmpty() || docbroker.isEmpty()) {
            return null;
        }

        try {
            IDfClient client = DfClient.getLocalClient();
            IDfTypedObject config = client.getClientConfig();
            config.setString("primary_host", docbroker);
            config.setInt("primary_port", Integer.parseInt(puerto));
            IDfLoginInfo loginInfoObj = new DfLoginInfo();
            loginInfoObj.setUser(usuario);
            loginInfoObj.setPassword(password);
            docbroker = docbroker.contains(".") ? docbroker.substring(0, docbroker.indexOf(".")) : docbroker;
            sesion = client.newSession(docbase + "@" + docbroker, loginInfoObj);
            if (!sesion.isConnected()) {
                return null;
            }
        } catch (Exception dfe) {
            Utilidades.escribeLog("Error al conectar con Documentum (conectarDocumentum): " + dfe.toString());
        }
        return sesion;
    }
}
