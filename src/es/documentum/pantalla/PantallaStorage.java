package es.documentum.pantalla;

import com.documentum.fc.client.IDfSession;
import com.documentum.fc.common.DfException;
import es.documentum.utilidades.Utilidades;
import es.documentum.utilidades.UtilidadesDocumentum;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 * @author julian
 */
public class PantallaStorage extends javax.swing.JFrame {

    UtilidadesDocumentum utilDocum = new UtilidadesDocumentum();
    Utilidades util = new Utilidades();
    PantallaBarra barradocum = null;
    boolean esadmin = false;
    ArrayList listaStorage = new ArrayList();
    String dirbase = util.usuarioHome() + util.separador() + "documentumdfcs";
    String dirdfc = dirbase + util.separador() + "documentum" + util.separador() + "shared" + util.separador();
    public static PantallaDocumentum ventanapadre = null;
    private Boolean botonderecho = false;
    private String componente = "";
    private String idDocumentum = "";

    public String getIdDocumentum() {
        return idDocumentum;
    }

    public void setIdDocumentum(String idDocumentum) {
        this.idDocumentum = idDocumentum;
    }

    public PantallaStorage(PantallaDocumentum parent, boolean modal) {
        ventanapadre = parent;
        initComponents();
        setLocationRelativeTo(null);
        inicializar();
        //    setVisible(true);
    }

    private void inicializar() {
        try {
            setIconImage(new ImageIcon(getLogo()).getImage());
        } catch (NullPointerException e) {
            Utilidades.escribeLog("\nError cargando el Logo " + e.getMessage() + "\n");
        }
    }

    protected static Image getLogo() {
        //   java.net.URL imgURL = PantallaDocumentum.class.getClassLoader().getResource("es/documentum/imagenes/documentum_logo_mini.gif");
        java.net.URL imgURL = PantallaStorage.class.getClassLoader().getResource("es/documentum/imagenes/storage.png");

        if (imgURL != null) {
            return new ImageIcon(imgURL).getImage();
        } else {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupAtributos = new javax.swing.JPopupMenu();
        opcionCopiarValor = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        opcionExportarAExcel = new javax.swing.JMenuItem();
        botonSalir = new javax.swing.JButton();
        panelDocumentos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaStorage = new javax.swing.JTable();

        opcionCopiarValor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/copiar.png"))); // NOI18N
        opcionCopiarValor.setText("Copiar Valor");
        opcionCopiarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCopiarValorActionPerformed(evt);
            }
        });
        popupAtributos.add(opcionCopiarValor);
        popupAtributos.add(jSeparator2);

        opcionExportarAExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/excel-24.gif"))); // NOI18N
        opcionExportarAExcel.setText("Exportar lista a Excel");
        opcionExportarAExcel.setActionCommand("ExportarAtributosExcel");
        opcionExportarAExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionExportarAExcelActionPerformed(evt);
            }
        });
        popupAtributos.add(opcionExportarAExcel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1080, 650));
        setPreferredSize(new java.awt.Dimension(1080, 650));

        botonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/salir_peq.png"))); // NOI18N
        botonSalir.setText("Cerrar");
        botonSalir.setMaximumSize(new java.awt.Dimension(89, 28));
        botonSalir.setMinimumSize(new java.awt.Dimension(89, 28));
        botonSalir.setPreferredSize(new java.awt.Dimension(89, 28));
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        panelDocumentos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelDocumentos.setAutoscrolls(true);
        panelDocumentos.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        panelDocumentos.setMinimumSize(new java.awt.Dimension(1065, 558));
        panelDocumentos.setPreferredSize(new java.awt.Dimension(1065, 558));

        tablaStorage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaStorage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaStorageMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tablaStorage);

        javax.swing.GroupLayout panelDocumentosLayout = new javax.swing.GroupLayout(panelDocumentos);
        panelDocumentos.setLayout(panelDocumentosLayout);
        panelDocumentosLayout.setHorizontalGroup(
            panelDocumentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
        );
        panelDocumentosLayout.setVerticalGroup(
            panelDocumentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelDocumentos, javax.swing.GroupLayout.DEFAULT_SIZE, 1067, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(panelDocumentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void popupmenu(MouseEvent evt) {
        if (evt.isPopupTrigger() || botonderecho) {
            botonderecho = false;
            if (evt.getSource().getClass().getName().equals("javax.swing.JTable")) {
                JTable source = (JTable) evt.getSource();
                int row = source.rowAtPoint(evt.getPoint());
                int column = source.columnAtPoint(evt.getPoint());
                if (!source.isRowSelected(row)) {
                    source.changeSelection(row, column, false, false);
                }
                if (componente.equals("tablaStorage")) {
                    if (row >= 0 && column >= 0 && tablaStorage.getModel().getRowCount() > 0) {
                        popupAtributos.show(evt.getComponent(), evt.getX(), evt.getY());
                    }
                }
            }
        }
    }


    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        salir();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void opcionCopiarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCopiarValorActionPerformed
        if (tablaStorage.getModel().getValueAt(tablaStorage.getSelectedRow(), tablaStorage.getSelectedColumn()) != null) {
            Utilidades.copiarTextoPortapapeles(tablaStorage.getModel().getValueAt(tablaStorage.convertRowIndexToModel(tablaStorage.getSelectedRow()), tablaStorage.getSelectedColumn()).toString());
        }

    }//GEN-LAST:event_opcionCopiarValorActionPerformed

    private void opcionExportarAExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionExportarAExcelActionPerformed
        exportarAtributosExcel();
    }//GEN-LAST:event_opcionExportarAExcelActionPerformed

    private void tablaStorageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaStorageMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            botonderecho = true;
            componente = "tablaStorage";
            popupmenu(evt);
        }
    }//GEN-LAST:event_tablaStorageMousePressed

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaStorage(ventanapadre, true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonSalir;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem opcionCopiarValor;
    private javax.swing.JMenuItem opcionExportarAExcel;
    private javax.swing.JPanel panelDocumentos;
    private javax.swing.JPopupMenu popupAtributos;
    private javax.swing.JTable tablaStorage;
    // End of variables declaration//GEN-END:variables

    public void cargarStorage() {
        new Thread() {
            public void run() {
                DefaultTableModel modeloLotes = new DefaultTableModel() {
                    @Override
                    public boolean isCellEditable(int fila, int columna) {
                        return false;
                    }
                };
                utilDocum = new UtilidadesDocumentum(dirdfc + "dfc.properties");
                IDfSession sesion = utilDocum.conectarDocumentum();
                barradocum = new PantallaBarra(PantallaStorage.this, false);
                barradocum.setTitle("Almacenamiento del Repositorio ");
                barradocum.barra.setIndeterminate(true);
                barradocum.botonParar.setVisible(false);
                barradocum.setLabelMensa("");
                barradocum.barra.setOpaque(true);
                barradocum.barra.setStringPainted(false);
                barradocum.validate();
                barradocum.setVisible(true);

                listaStorage = utilDocum.dameStorage(sesion);
                if (listaStorage.size() <= 0) {
                    tablaStorage.setModel(modeloLotes);
                    barradocum.dispose();
                    return;
                }

                Object[][] datos = new Object[listaStorage.size()][7];
                Object[] cabecera = {"Nombre", "Tipo", "Tamaño", "Estado", "Location", "Ruta en S.O.", "ID"};

                for (int n = 0; n < listaStorage.size(); n++) {
                    ArrayList valores = (ArrayList) listaStorage.get(n);
                    datos[n][0] = valores.get(0);
                    datos[n][1] = valores.get(1);
                    datos[n][2] = valores.get(2);
                    datos[n][3] = valores.get(3);
                    datos[n][4] = valores.get(4);
                    datos[n][5] = valores.get(5);
                    datos[n][6] = valores.get(6);
                    barradocum.labelMensa.setText((String) valores.get(0));
                }

                if (datos.length > 0) {
                    modeloLotes = new DefaultTableModel(datos, cabecera) {
                        @Override
                        public boolean isCellEditable(int fila, int columna) {
                            return false;
                        }
                    };

                } else {
                    modeloLotes = new DefaultTableModel() {
                        @Override
                        public boolean isCellEditable(int fila, int columna) {
                            return false;
                        }
                    ;
                }
                ;
                }
                tablaStorage.setModel(modeloLotes);
                tablaStorage.setShowHorizontalLines(true);
                tablaStorage.setRowSelectionAllowed(false);
                tablaStorage.setAutoCreateRowSorter(true);

                TableColumn columna = tablaStorage.getColumnModel().getColumn(0);
                columna.setPreferredWidth(220);
                columna.setMaxWidth(220);
                columna.sizeWidthToFit();
                TableColumn columna1 = tablaStorage.getColumnModel().getColumn(1);
                columna1.setPreferredWidth(100);
                columna1.setMaxWidth(100);
                columna1.sizeWidthToFit();
                TableColumn columna2 = tablaStorage.getColumnModel().getColumn(2);
                columna2.setPreferredWidth(100);
                columna2.setMaxWidth(100);
                columna2.sizeWidthToFit();
                TableColumn columna3 = tablaStorage.getColumnModel().getColumn(3);
                columna3.setPreferredWidth(100);
                columna3.setMaxWidth(100);
                columna3.sizeWidthToFit();
                TableColumn columna4 = tablaStorage.getColumnModel().getColumn(4);
                columna4.setPreferredWidth(140);
                columna4.setMinWidth(140);
                columna4.sizeWidthToFit();

                tablaStorage.getColumnModel().getColumn(6).setWidth(0);
                tablaStorage.getColumnModel().getColumn(6).setMinWidth(0);
                tablaStorage.getColumnModel().getColumn(6).setMaxWidth(0);

                pintarTabla();
                JTableHeader header = tablaStorage.getTableHeader();
                header.addMouseListener(new TableHeaderMouseListener(tablaStorage));
                try {
                    if (sesion.isConnected()) {
                        sesion.disconnect();
                    }
                } catch (DfException ex) {

                }
                tablaStorage.doLayout();
                barradocum.dispose();
            }
        }.start();
        System.gc();
    }

    private void pintarTabla() {
        tablaStorage.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
                boolean oddRow = (row % 2 == 0);
                if (oddRow) {
                    setBackground(Color.WHITE);
                } else {
                    setBackground(new Color(245, 245, 245)); // gris claro
                }

                String valor = (String) table.getValueAt(row, 1);
                String estado = (String) table.getValueAt(row, 3);

                if (valor.equals("dm_filestore")) {
                    setOpaque(true);
                    setForeground(new Color(0, 0, 153)); // Azul marino
                } else {
                    setOpaque(true);
                    setForeground(Color.BLACK);
                }

                switch (estado) {
                    case "Offline":
                        setForeground(new Color(175, 50, 25));  // Granate
                        break;
                    case "Read Only":
                        setForeground(new Color(0, 75, 25));  // Verde Oscuro
                        break;
                    case "WORM":
                        setForeground(new Color(155, 155, 0));  // Amarillo Oscuro
                        break;
                }

                if (isSelected) {
                    setBackground(new Color(175, 205, 235)); // azul claro selección
                }

                return this;
            }
        });
    }

    private void salir() {
        this.dispose();
        System.gc();
    }

    private void exportarAtributosExcel() {
        if (tablaStorage.getModel().getRowCount() > 0) {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Seleccionar directorio y nombre de fichero");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                String fichero = chooser.getSelectedFile().toString();
                if (!fichero.toLowerCase().endsWith(".xlsx")) {
                    fichero = fichero + ".xlsx";
                }
                if (!fichero.isEmpty()) {
                    util.exportarAExcel(tablaStorage, fichero, "Almacenamiento ");
                    //   util.exportaExcel(tablaStorage, fichero);
                }
            } else {
                Utilidades.escribeLog("No se ha seleccionado el fichero de salida ");
            }
            System.gc();
        }

    }

    public class TableHeaderMouseListener extends MouseAdapter {

        private final JTable table;

        public TableHeaderMouseListener(JTable table) {
            this.table = table;
        }

        @Override
        public void mouseClicked(MouseEvent event) {
            pintarTabla();
        }
    }
}
