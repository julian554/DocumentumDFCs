package es.documentum.pantalla;

import es.documentum.Beans.AtributosDocumentum;
import static es.documentum.pantalla.PantallaDocumentum.getLogo;
import es.documentum.utilidades.Utilidades;
import es.documentum.utilidades.UtilidadesDocumentum;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 * @author julian
 */
public class PantallaAtributos extends javax.swing.JFrame {

    UtilidadesDocumentum utilDocum = new UtilidadesDocumentum();
    Utilidades util = new Utilidades();
    boolean esadmin = false;
    ArrayList<AtributosDocumentum> atributos = new ArrayList<AtributosDocumentum>();
    String dirbase = util.usuarioHome() + util.separador() + "documentumdfcs";
    String dirdfc = dirbase + util.separador() + "documentum" + util.separador() + "shared" + util.separador();
    public static PantallaDocumentum ventanapadre = null;
    private Boolean botonderecho = false;
    private String componente = "";
    private String idDocumentum = "";

    public String getIdDocumentum() {
        return idDocumentum;
    }

    public void setIdDocumentum(String idDocumentum) {
        this.idDocumentum = idDocumentum;
        textoIdDocumentum.setText(idDocumentum);
    }

    public PantallaAtributos(PantallaDocumentum parent, boolean modal) {
        ventanapadre = parent;
        initComponents();
        setLocationRelativeTo(null);
        inicializar();
        setVisible(true);
    }

    private void inicializar() {
        cargarAtributos("");
        try {
            setIconImage(new ImageIcon(getLogo()).getImage());
        } catch (NullPointerException e) {
            Utilidades.escribeLog("\nError cargando el Logo " + e.getMessage() + "\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupAtributos = new javax.swing.JPopupMenu();
        opcionCopiarValor = new javax.swing.JMenuItem();
        opcionCopiarAtributo = new javax.swing.JMenuItem();
        opcionExportarAtributosExcel = new javax.swing.JMenuItem();
        panelDocumentos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAtributos = new javax.swing.JTable();
        botonSalir = new javax.swing.JButton();
        botonDumpAtributos = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        textoIdDocumentum = new javax.swing.JTextField();
        EtiquetaEstado = new javax.swing.JLabel();

        opcionCopiarValor.setText("Copiar Valor");
        opcionCopiarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCopiarValorActionPerformed(evt);
            }
        });
        popupAtributos.add(opcionCopiarValor);

        opcionCopiarAtributo.setText("Copiar nombre de Atributo");
        opcionCopiarAtributo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCopiarAtributoActionPerformed(evt);
            }
        });
        popupAtributos.add(opcionCopiarAtributo);

        opcionExportarAtributosExcel.setText("Exportar lista de Atributos a Excel");
        opcionExportarAtributosExcel.setActionCommand("ExportarAtributosExcel");
        opcionExportarAtributosExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionExportarAtributosExcelActionPerformed(evt);
            }
        });
        popupAtributos.add(opcionExportarAtributosExcel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelDocumentos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelDocumentos.setAutoscrolls(true);
        panelDocumentos.setMaximumSize(new java.awt.Dimension(1020, 640));
        panelDocumentos.setMinimumSize(new java.awt.Dimension(1020, 640));

        tablaAtributos.setAutoCreateRowSorter(true);
        tablaAtributos.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        tablaAtributos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaAtributos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaAtributosMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablaAtributos);

        javax.swing.GroupLayout panelDocumentosLayout = new javax.swing.GroupLayout(panelDocumentos);
        panelDocumentos.setLayout(panelDocumentosLayout);
        panelDocumentosLayout.setHorizontalGroup(
            panelDocumentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1051, Short.MAX_VALUE)
        );
        panelDocumentosLayout.setVerticalGroup(
            panelDocumentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
        );

        botonSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/salir_peq.png"))); // NOI18N
        botonSalir.setText("Cerrar");
        botonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSalirActionPerformed(evt);
            }
        });

        botonDumpAtributos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/ejecutar_peq.png"))); // NOI18N
        botonDumpAtributos.setText("VolcarAtributos");
        botonDumpAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDumpAtributosActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Identificador de Documentun (r_object_id):");

        textoIdDocumentum.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        textoIdDocumentum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoIdDocumentumActionPerformed(evt);
            }
        });

        EtiquetaEstado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        EtiquetaEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoIdDocumentum, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(208, 208, 208)
                .addComponent(botonDumpAtributos, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addComponent(EtiquetaEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panelDocumentos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(textoIdDocumentum, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonDumpAtributos, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 718, Short.MAX_VALUE)
                .addComponent(EtiquetaEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(87, 87, 87)
                    .addComponent(panelDocumentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(37, 37, 37)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaAtributosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaAtributosMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            botonderecho = true;
            componente = "tablaAtributos";
            popupmenu(evt);
        }
    }//GEN-LAST:event_tablaAtributosMousePressed

    private void popupmenu(MouseEvent evt) {
        if (evt.isPopupTrigger() || botonderecho) {
            botonderecho = false;
            int row = 0;
            int column = 0;
            if (evt.getSource().getClass().getName().equals("javax.swing.JTable")) {
                JTable source = (JTable) evt.getSource();
                row = source.rowAtPoint(evt.getPoint());
                column = source.columnAtPoint(evt.getPoint());
                if (!source.isRowSelected(row)) {
                    source.changeSelection(row, column, false, false);
                }

                if (componente.equals("tablaAtributos")) {
                    if (row >= 0 && column >= 0 && tablaAtributos.getModel().getRowCount() > 0) {
                        popupAtributos.show(evt.getComponent(), evt.getX(), evt.getY());
                    }
                }

            }

        }
    }


    private void textoIdDocumentumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoIdDocumentumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoIdDocumentumActionPerformed

    private void botonDumpAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDumpAtributosActionPerformed
        if (!textoIdDocumentum.getText().isEmpty()) {
            if (textoIdDocumentum.getText().length() == 16) {
                EtiquetaEstado.setText("Buscando atributos en Documentum para el ID de Documentum " + textoIdDocumentum.getText());
                cargarAtributos(textoIdDocumentum.getText());
                utilDocum = new UtilidadesDocumentum(dirdfc + "dfc.properties");
            } else {
                EtiquetaEstado.setText("El ID de Documentum (r_object_id) tiene que tener 16 caracteres.");
            }
        }
    }//GEN-LAST:event_botonDumpAtributosActionPerformed

    private void botonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSalirActionPerformed
        salir();
    }//GEN-LAST:event_botonSalirActionPerformed

    private void opcionCopiarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCopiarValorActionPerformed
        if (tablaAtributos.getModel().getValueAt(tablaAtributos.getSelectedRow(), 1) != null) {
            Utilidades.copiarTextoPortapapeles(tablaAtributos.getModel().getValueAt(tablaAtributos.convertRowIndexToModel(tablaAtributos.getSelectedRow()), 1).toString());
        }

    }//GEN-LAST:event_opcionCopiarValorActionPerformed

    private void opcionCopiarAtributoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCopiarAtributoActionPerformed
        Utilidades.copiarTextoPortapapeles(tablaAtributos.getModel().getValueAt(tablaAtributos.convertRowIndexToModel(tablaAtributos.getSelectedRow()), 0).toString());
    }//GEN-LAST:event_opcionCopiarAtributoActionPerformed

    private void opcionExportarAtributosExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionExportarAtributosExcelActionPerformed
        ExportarAtributosExcel();
    }//GEN-LAST:event_opcionExportarAtributosExcelActionPerformed

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaAtributos(ventanapadre, true).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel EtiquetaEstado;
    private javax.swing.JButton botonDumpAtributos;
    private javax.swing.JButton botonSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem opcionCopiarAtributo;
    private javax.swing.JMenuItem opcionCopiarValor;
    private javax.swing.JMenuItem opcionExportarAtributosExcel;
    private javax.swing.JPanel panelDocumentos;
    private javax.swing.JPopupMenu popupAtributos;
    private javax.swing.JTable tablaAtributos;
    private javax.swing.JTextField textoIdDocumentum;
    // End of variables declaration//GEN-END:variables

    public void cargarAtributos(String pr_object_id) {
        final String r_object_id = pr_object_id;
        new Thread() {
            public void run() {
                String mensajeborrado = "";
                Color colormensaje = Color.BLACK;
                DefaultTableModel modeloLotes = new DefaultTableModel() {
                    @Override
                    public boolean isCellEditable(int fila, int columna) {
                        return false;
                    }
                };;
                utilDocum = new UtilidadesDocumentum(dirdfc + "dfc.properties");
                if (r_object_id.isEmpty()) {
                    tablaAtributos.setModel(modeloLotes);
                    EtiquetaEstado.setText("");
                    return;
                }

                atributos = utilDocum.DameTodosAtributos(r_object_id);
                if (atributos.size() <= 0) {
                    tablaAtributos.setModel(modeloLotes);
                    if (!utilDocum.dameError().isEmpty()) {
                        if (utilDocum.dameError().contains("Bad ID given: 0000000000000000")) {
                            EtiquetaEstado.setText("No se encontró el ID de Documentum " + r_object_id);
                        } else {
                            EtiquetaEstado.setText(utilDocum.dameError());
                        }
                    } else {
                        EtiquetaEstado.setText("No se encontró el ID de Documentum " + r_object_id);
                    }
                    EtiquetaEstado.validate();
                    return;
                }

                Object[][] datos = new Object[atributos.size()][2];
                Object[] cabecera = {"Nombre del Atributo", "Valor del Atributo"};

                for (int n = 0; n < atributos.size(); n++) {
                    datos[n][0] = atributos.get(n).getNombre();
                    datos[n][1] = atributos.get(n).getValor();
                    if (atributos.get(n).getNombre().toLowerCase().endsWith("borrado_logico")) {
                        if (atributos.get(n).getValor() != null) {
                            if (atributos.get(n).getValor().equals("1")) {
                                mensajeborrado = "BORRADO LÓGICO DEL DOCUMENTO";
                                colormensaje = Color.RED;
                            } else {
                                mensajeborrado = "";
                            }
                        }
                    }
                }

                if (datos.length > 0) {
                    if (!esadmin) {
                        modeloLotes = new DefaultTableModel(datos, cabecera) {
                            @Override
                            public boolean isCellEditable(int fila, int columna) {
                                return false;
                            }
                        };
                    } else {
                        modeloLotes = new DefaultTableModel(datos, cabecera) {
                            @Override
                            public boolean isCellEditable(int fila, int columna) {
                                return false;
                            }
                        };
                    }

                } else {
                    EtiquetaEstado.setText("No se encontró el ID de Documentum " + r_object_id);
                }
                tablaAtributos.setModel(modeloLotes);
                TableColumn columna = tablaAtributos.getColumnModel().getColumn(0);
                columna.setPreferredWidth(250);
                columna.setMaxWidth(250);
                columna.sizeWidthToFit();
                tablaAtributos.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
                tablaAtributos.doLayout();
                EtiquetaEstado.setText(mensajeborrado);
                EtiquetaEstado.setForeground(colormensaje);
                EtiquetaEstado.validate();

            }
        }.start();
        System.gc();
    }

    private void salir() {
        this.dispose();
        System.gc();
    }

    private void ExportarAtributosExcel() {
        if (tablaAtributos.getModel().getRowCount() > 0) {
            String fichero = "";
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Seleccionar directorio y nombre de fichero");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                fichero = chooser.getSelectedFile().toString();
                if (!fichero.toLowerCase().endsWith(".xls")) {
                    fichero = fichero + ".xls";
                }
                util.exportaExcel(tablaAtributos, fichero);
            } else {
                Utilidades.escribeLog("No se ha seleccionado el fichero de salida ");
            }
            System.gc();
        }

    }
}
