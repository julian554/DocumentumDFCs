package es.documentum.pantalla;

import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfTypedObject;
import com.documentum.fc.common.DfException;
import es.documentum.utilidades.ClassPathUpdater;
import es.documentum.utilidades.TablaSinEditarCol;
import es.documentum.utilidades.Utilidades;
import es.documentum.utilidades.UtilidadesDocumentum;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.JTree;
import static javax.swing.WindowConstants.HIDE_ON_CLOSE;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

public class PantallaArbolGrupos extends javax.swing.JFrame {

    public static PantallaDocumentum ventanapadre = null;
    Utilidades util = new Utilidades();
    UtilidadesDocumentum utildocum = new UtilidadesDocumentum();
    IDfSession gsesion = sesionDocumentum();
    private static final String NEWLINE = "\r\n";
    DefaultMutableTreeNode raiz = new DefaultMutableTreeNode("raiz");
    DefaultTreeModel modelo = new DefaultTreeModel(raiz);
    Boolean mistipos = false;
    String tiposPadre = "";
    Boolean botonderecho = false;
    ArrayList busqueda = new ArrayList();
    String componente = "";
    private String nodoseleccionado;
    Long numconsultas = 0L;
    PantallaBarra barradocum = new PantallaBarra(this, false);

    public PantallaArbolGrupos(PantallaDocumentum parent, boolean modal) {
        initComponents();
        try {
            setIconImage(new ImageIcon(getLogo()).getImage());
        } catch (NullPointerException e) {
            Utilidades.escribeLog("\nError cargando el Logo " + e.getMessage() + "\n");
        }
        setLocationRelativeTo(null);
        botonBuscarSiguiente.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuOpciones = new javax.swing.JPopupMenu();
        opcionAtributos = new javax.swing.JMenuItem();
        opcionListadoXML = new javax.swing.JMenuItem();
        menuDatos = new javax.swing.JPopupMenu();
        opcionCopiarValor = new javax.swing.JMenuItem();
        opcionExportarExcel = new javax.swing.JMenuItem();
        botonCerrar = new javax.swing.JButton();
        textoTipo = new javax.swing.JTextField();
        botonBuscar = new javax.swing.JToggleButton();
        botonBuscarSiguiente = new javax.swing.JToggleButton();
        divisorArbol = new javax.swing.JSplitPane();
        scrollInfo = new javax.swing.JScrollPane();
        tablaInfo = new javax.swing.JTable();
        scrollArbol = new javax.swing.JScrollPane();
        arbolGrupos = new javax.swing.JTree();
        botonActualizar = new javax.swing.JToggleButton();
        panelDocu = new javax.swing.JPanel();
        etiquetaNumGrupos = new javax.swing.JLabel();
        textoNumMaxGrupos = new javax.swing.JTextField();
        etiquetaMensaje = new javax.swing.JLabel();
        menuPrincipal = new javax.swing.JMenuBar();
        opcionOpciones = new javax.swing.JMenu();
        opcionCerrar = new javax.swing.JMenuItem();
        opcionActualizar = new javax.swing.JMenuItem();

        opcionAtributos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/ver-atributos.png"))); // NOI18N
        opcionAtributos.setText("Ver Atributos");
        opcionAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionAtributosActionPerformed(evt);
            }
        });
        menuOpciones.add(opcionAtributos);

        opcionListadoXML.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/expotar-xml.png"))); // NOI18N
        opcionListadoXML.setText("Exportar Arbol a XML");
        opcionListadoXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionListadoXMLActionPerformed(evt);
            }
        });
        menuOpciones.add(opcionListadoXML);

        opcionCopiarValor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/copiar.png"))); // NOI18N
        opcionCopiarValor.setText("Copiar Valor");
        opcionCopiarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCopiarValorActionPerformed(evt);
            }
        });
        menuDatos.add(opcionCopiarValor);

        opcionExportarExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/excel-24.gif"))); // NOI18N
        opcionExportarExcel.setText("Exportar a Excel");
        opcionExportarExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionExportarExcelActionPerformed(evt);
            }
        });
        menuDatos.add(opcionExportarExcel);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tipos Documentales");
        setMinimumSize(new java.awt.Dimension(909, 651));

        botonCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/salir_peq.png"))); // NOI18N
        botonCerrar.setText("Cerrar");
        botonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCerrarActionPerformed(evt);
            }
        });

        textoTipo.setMinimumSize(new java.awt.Dimension(6, 24));
        textoTipo.setPreferredSize(new java.awt.Dimension(6, 24));

        botonBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/buscar_peq.png"))); // NOI18N
        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        botonBuscarSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/siguiente.png"))); // NOI18N
        botonBuscarSiguiente.setText("Buscar Siguiente");
        botonBuscarSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarSiguienteActionPerformed(evt);
            }
        });

        divisorArbol.setDividerSize(3);

        tablaInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Propiedad", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInfo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaInfo.setShowHorizontalLines(false);
        tablaInfo.setShowVerticalLines(false);
        tablaInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaInfoMousePressed(evt);
            }
        });
        scrollInfo.setViewportView(tablaInfo);

        divisorArbol.setRightComponent(scrollInfo);

        scrollArbol.setPreferredSize(new java.awt.Dimension(400, 362));

        arbolGrupos.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("raiz")));
        arbolGrupos.setAutoscrolls(true);
        arbolGrupos.setRowHeight(18);
        arbolGrupos.setShowsRootHandles(true);
        arbolGrupos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                arbolGruposMousePressed(evt);
            }
        });
        arbolGrupos.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                arbolGruposValueChanged(evt);
            }
        });
        scrollArbol.setViewportView(arbolGrupos);

        divisorArbol.setLeftComponent(scrollArbol);

        botonActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/actualizar-atr.png"))); // NOI18N
        botonActualizar.setText("Actualizar");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        panelDocu.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelDocu.setPreferredSize(new java.awt.Dimension(330, 30));

        etiquetaNumGrupos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        etiquetaNumGrupos.setText("Número de Máximo de Grupos a mostrar");
        etiquetaNumGrupos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        etiquetaNumGrupos.setMaximumSize(new java.awt.Dimension(116, 26));
        etiquetaNumGrupos.setPreferredSize(new java.awt.Dimension(116, 26));

        textoNumMaxGrupos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textoNumMaxGrupos.setText("1000");
        textoNumMaxGrupos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textoNumMaxGruposFocusLost(evt);
            }
        });

        etiquetaMensaje.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        etiquetaMensaje.setForeground(new java.awt.Color(0, 0, 153));
        etiquetaMensaje.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        etiquetaMensaje.setPreferredSize(new java.awt.Dimension(200, 26));

        javax.swing.GroupLayout panelDocuLayout = new javax.swing.GroupLayout(panelDocu);
        panelDocu.setLayout(panelDocuLayout);
        panelDocuLayout.setHorizontalGroup(
            panelDocuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDocuLayout.createSequentialGroup()
                .addComponent(etiquetaMensaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(etiquetaNumGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(textoNumMaxGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelDocuLayout.setVerticalGroup(
            panelDocuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDocuLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(panelDocuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(etiquetaNumGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoNumMaxGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(etiquetaMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91))
        );

        opcionOpciones.setMnemonic('O');
        opcionOpciones.setText("Opciones");
        opcionOpciones.setName("opcionOpciones"); // NOI18N

        opcionCerrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        opcionCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/salir_peq.png"))); // NOI18N
        opcionCerrar.setText("Cerrar");
        opcionCerrar.setToolTipText("Cerrar la Aplicación");
        opcionCerrar.setActionCommand("");
        opcionCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionCerrarActionPerformed(evt);
            }
        });
        opcionOpciones.add(opcionCerrar);

        opcionActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/documentum/imagenes/grupo.png"))); // NOI18N
        opcionActualizar.setText("Cargar Grupos y Roles");
        opcionActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionActualizarActionPerformed(evt);
            }
        });
        opcionOpciones.add(opcionActualizar);

        menuPrincipal.add(opcionOpciones);

        setJMenuBar(menuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonBuscarSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(botonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(divisorArbol, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(panelDocu, javax.swing.GroupLayout.DEFAULT_SIZE, 898, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(divisorArbol, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textoTipo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonBuscar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonBuscarSiguiente, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonActualizar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonCerrar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelDocu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_botonCerrarActionPerformed

    private void arbolGruposMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_arbolGruposMousePressed
//        if (!arbolGrupos.isSelectionEmpty()) {
//            if (evt.getButton() == MouseEvent.BUTTON3) {
//                botonderecho = true;
//                componente = "arbolGrupos";
//                popupmenu(evt);
//            } else {
//                DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolGrupos.getLastSelectedPathComponent();
//                if (node == null) // Nothing is selected.
//                {
//                    return;
//                }
//
//                Object nodeInfo = node.getUserObject();
//                String nombre = nodeInfo.toString();
//                nodoseleccionado = nombre;
//                if (esGrupoPadre(nombre) && node.isLeaf()) {
//                    dameGrupos(nombre, node);
//                    arbolGrupos.getCellRenderer();
//                    expandOrCollapsToLevel(arbolGrupos, new TreePath(node), 1, true);
//                } else {
//                    //           popupFichero.show((Component) evt.getSource(), evt.getX(), evt.getY());
//                }
//                System.out.println(nombre + " --> " + (esGrupoPadre(nombre) ? "Nodo padre" : "Hijo"));
//                cargarInfoNodo(nombre);
//            }
//        }
        actualizarNodoActual();
    }//GEN-LAST:event_arbolGruposMousePressed

    private void popupmenu(MouseEvent evt) {
        if (evt.isPopupTrigger() || botonderecho) {
            if (componente.equals("tablaInfo")) {
                menuDatos.show(evt.getComponent(), evt.getX(), evt.getY());
                botonderecho = false;
            }
            if (componente.equals("arbolGrupos")) {
                menuOpciones.show(evt.getComponent(), evt.getX(), evt.getY());
                botonderecho = false;
            }
        }

    }

    private void opcionCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_opcionCerrarActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        busqueda.clear();
        TreePath rutanodo = buscarNodo(raiz, textoTipo.getText());
        arbolGrupos.setSelectionPath(rutanodo);
        arbolGrupos.scrollPathToVisible(rutanodo);
        botonBuscarSiguiente.setVisible(true);
    }//GEN-LAST:event_botonBuscarActionPerformed

    private void opcionAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAtributosActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolGrupos.getLastSelectedPathComponent();
        if (node != null) // Nothing is selected.
        {
//            PantallaTipoAtributos pantallatipoatributos = new PantallaTipoAtributos(this, true);
//            String id = "";
//            Object nodeInfo = node.getUserObject();
//            String nombre = nodeInfo.toString();
//            id = utildocum.dameRobjectidDeTipo(nombre, gsesion);
//
//            pantallatipoatributos.setTitle("Atributos del Tipo - r_object_id: " + id);
//            pantallatipoatributos.setR_object_id(id);
//            pantallatipoatributos.cargarTablas(id);
//
//            pantallatipoatributos.setVisible(true);
        }
    }//GEN-LAST:event_opcionAtributosActionPerformed

    private void opcionListadoXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionListadoXMLActionPerformed
        // recorrerArbol();

        TreeModel modelo = arbolGrupos.getModel();
        try {
            String res = util.arboltoXml(modelo);
            //    System.out.println(res);
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Seleccionar directorio y nombre de fichero");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                String fichero = chooser.getSelectedFile().toString();
                if (!fichero.toLowerCase().endsWith(".xml")) {
                    fichero = fichero + ".xml";
                }
                util.borrarFichero(fichero);
                util.crearFichero(fichero, "xml");
                util.escribeFichero(fichero, res);
            }
        } catch (Exception ex) {
            System.out.println("Error - " + ex.getMessage());
        }

    }//GEN-LAST:event_opcionListadoXMLActionPerformed

    private void botonBuscarSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarSiguienteActionPerformed
        TreePath rutanodo = buscarNodoSiguiente(textoTipo.getText());
        if (rutanodo == null) {
            busqueda.clear();
            rutanodo = buscarNodo(raiz, textoTipo.getText());
        }
        arbolGrupos.setSelectionPath(rutanodo);
        arbolGrupos.scrollPathToVisible(rutanodo);
    }//GEN-LAST:event_botonBuscarSiguienteActionPerformed

    private void arbolGruposValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_arbolGruposValueChanged
        actualizarNodoActual();
    }//GEN-LAST:event_arbolGruposValueChanged

    private void actualizarNodoActual() {
        if (!arbolGrupos.isSelectionEmpty()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolGrupos.getLastSelectedPathComponent();
            if (node == null) // Nothing is selected.
            {
                return;
            }

            Object nodeInfo = node.getUserObject();
            String nombre = nodeInfo.toString();

            if (esGrupoPadre(nombre) && node.isLeaf()) {
                TablaSinEditarCol modeloLotes = new TablaSinEditarCol();
                String[] cabecera = {"Propiedad", "Valor"};
                String[][] datos = new String[1][2];
                modeloLotes = new TablaSinEditarCol(datos, cabecera);
                pintarTabla();
                tablaInfo.setModel(modeloLotes);
                etiquetaMensaje.setText("Consultando subgrupos de " + nombre + " ...");
                etiquetaMensaje.paintImmediately(etiquetaMensaje.getVisibleRect());
                numconsultas = 0L;
                dameGrupos(nombre, node);
                arbolGrupos.getCellRenderer();
                expandOrCollapsToLevel(arbolGrupos, new TreePath(node.getPath()), 1, true);
                etiquetaMensaje.setText("Consultados " + numconsultas + " grupos de " + nombre);
            } else {
                //           popupFichero.show((Component) evt.getSource(), evt.getX(), evt.getY());
            }
//            System.out.println(nombre + " --> " + (esGrupoPadre(nombre) ? "Nodo padre" : "Hijo"));
            cargarInfoNodo(nombre);
        }
    }

    private void tablaInfoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInfoMousePressed
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            botonderecho = true;
            componente = "tablaInfo";
            popupmenu(evt);
        }
    }//GEN-LAST:event_tablaInfoMousePressed

    private void opcionCopiarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionCopiarValorActionPerformed
        if (componente.equals("tablaInfo")) {
            Utilidades.copiarTextoPortapapeles(tablaInfo.getModel().getValueAt(tablaInfo.convertRowIndexToModel(tablaInfo.getSelectedRow()), tablaInfo.getSelectedColumn()).toString());
        }

    }//GEN-LAST:event_opcionCopiarValorActionPerformed

    private void opcionExportarExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionExportarExcelActionPerformed
        String fichero = "";
        if (componente.equals("tablaInfo")) {
            if (tablaInfo.getModel().getRowCount() > 0) {
                JFileChooser chooser = new JFileChooser();
                chooser.setCurrentDirectory(new java.io.File("."));
                chooser.setDialogTitle("Seleccionar directorio y nombre de fichero");
                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                    fichero = chooser.getSelectedFile().toString();
                    if (!fichero.toLowerCase().endsWith(".xlsx")) {
                        fichero = fichero + ".xlsx";
                    }
                    String hoja = "Tipo - " + nodoseleccionado;
                    util.exportarAExcel(tablaInfo, fichero, hoja);
                } else {
                    Utilidades.escribeLog("No se ha seleccionado el fichero de salida ");
                }
            }
        }
    }//GEN-LAST:event_opcionExportarExcelActionPerformed

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        cargarDatos();
    }//GEN-LAST:event_botonActualizarActionPerformed

    private void opcionActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionActualizarActionPerformed
        cargarDatos();
    }//GEN-LAST:event_opcionActualizarActionPerformed

    private void textoNumMaxGruposFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textoNumMaxGruposFocusLost
        Pattern regEx = Pattern.compile("\\d*");
        Matcher matcher = regEx.matcher(textoNumMaxGrupos.getText());
        if (!matcher.matches()) {
            textoNumMaxGrupos.setText("1000");
        }
    }//GEN-LAST:event_textoNumMaxGruposFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaArbolGrupos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaArbolGrupos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaArbolGrupos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaArbolGrupos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaArbolGrupos(ventanapadre, true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree arbolGrupos;
    private javax.swing.JToggleButton botonActualizar;
    private javax.swing.JToggleButton botonBuscar;
    private javax.swing.JToggleButton botonBuscarSiguiente;
    private javax.swing.JButton botonCerrar;
    private javax.swing.JSplitPane divisorArbol;
    private javax.swing.JLabel etiquetaMensaje;
    public javax.swing.JLabel etiquetaNumGrupos;
    private javax.swing.JPopupMenu menuDatos;
    private javax.swing.JPopupMenu menuOpciones;
    private javax.swing.JMenuBar menuPrincipal;
    private javax.swing.JMenuItem opcionActualizar;
    private javax.swing.JMenuItem opcionAtributos;
    private javax.swing.JMenuItem opcionCerrar;
    private javax.swing.JMenuItem opcionCopiarValor;
    private javax.swing.JMenuItem opcionExportarExcel;
    private javax.swing.JMenuItem opcionListadoXML;
    private javax.swing.JMenu opcionOpciones;
    private javax.swing.JPanel panelDocu;
    private javax.swing.JScrollPane scrollArbol;
    private javax.swing.JScrollPane scrollInfo;
    private javax.swing.JTable tablaInfo;
    private javax.swing.JTextField textoNumMaxGrupos;
    private javax.swing.JTextField textoTipo;
    // End of variables declaration//GEN-END:variables

    public Boolean esGrupoPadre(String grupo) {
        String dql = "select count(*) from dm_group_rp rg, dm_group_sp sg "
                + " where rg.r_object_id=sg.r_object_id and I_SUPERGROUPS_NAMES = '" + grupo
                + "' and GROUPS_NAMES IS NOT NULL and groups_names not in (' ', 'dm_world')";
        try {
            String resultado = execQuery(dql, gsesion);
            int valor = Integer.parseInt(resultado);
            return valor > 0;
        } catch (Exception ex) {
            Utilidades.escribeLog("Error al consultar esGrupoPadre - Grupo: " + grupo + " - Error: " + ex.getMessage());
        }
        return false;
    }

    public String execQuery(String query, IDfSession sesion) {
        //    Utilidades.escribeLog("execQuery: " + query + NEWLINE);
        String retVal = "";
        IDfCollection col = null;
        try {
            IDfQuery q = new DfQuery();
            q.setDQL(query);
            col = q.execute(sesion, DfQuery.EXEC_QUERY);
            if (col.next()) {
                IDfTypedObject r = col.getTypedObject();
                retVal = r.getValueAt(0).asString();
            }
        } catch (DfException ex) {
            Utilidades.escribeLog("execQuery.error al ejecutar DQL: " + ex.getMessage() + NEWLINE);
        }
        try {
            col.close();
        } catch (DfException e) {
            Utilidades.escribeLog("execQuery.error General: " + e.getMessage() + NEWLINE);
        }
        return retVal;
    }

    public void cargarDatos() {
        numconsultas = 0L;
        new Thread() {
            @Override
            public void run() {
                TablaSinEditarCol modeloLotes = new TablaSinEditarCol();
                String[] cabecera = {"Propiedad", "Valor"};
                String[][] datos = new String[0][2];
                modeloLotes = new TablaSinEditarCol(datos, cabecera);
                tablaInfo.setModel(modeloLotes);
                barradocum.ponerIcono("es/documentum/imagenes/grupo.png");
                barradocum.setTitle("Consultando Grupos en Documentum ...");
                PantallaBarra.barra.setIndeterminate(true);
                barradocum.botonParar.setVisible(true);
                barradocum.setLabelMensa("");
                PantallaBarra.barra.setOpaque(true);
                PantallaBarra.barra.setStringPainted(false);
                barradocum.validate();
                barradocum.setDefaultCloseOperation(HIDE_ON_CLOSE);
                barradocum.setVisible(true);
                cargarArbol();
                barradocum.setPARAR(false);
                barradocum.dispose();
                System.out.println("Consultas a 'dameGrupos': " + numconsultas);
                etiquetaMensaje.setText("Grupos consultados: " + numconsultas);
            }
        }.start();
    }

    public void cargarArbol() {
        botonBuscarSiguiente.setVisible(false);
        arbolGrupos.setModel(null);
        raiz.removeAllChildren();
        arbolGrupos.setCellRenderer(new RendererArbol());
        arbolGrupos.setModel(modelo);
        dameGrupos(" ", raiz);
        arbolGrupos.getCellRenderer();
        expandOrCollapsToLevel(arbolGrupos, new TreePath(((DefaultMutableTreeNode) arbolGrupos.getModel().getRoot())), 1, true);
    }

    private void dameGrupos(String grupo, DefaultMutableTreeNode nodo) {
        int numreg = Integer.parseInt(textoNumMaxGrupos.getText());

        String dql = "select all dm_repeating.groups_names from dm_group_sp  dm_group, dm_group_rp dm_repeating "
                + " where ((dm_group.group_name='" + grupo + "') and "
                + " exists (select r_object_id from dm_group_r  where "
                + "dm_group.r_object_id = r_object_id and groups_names not in (' ', 'dm_world')) "
                + " and dm_repeating.r_object_id=dm_group.r_object_id )  and groups_names is not null";
        if (grupo.equals(" ")) {
            dql = "select distinct group_name as nombre from dm_group_sp order by 1";
        }
        if (numreg > 0) {
            dql = dql + " enable (return_top " + numreg + ")";
        } else {
            etiquetaMensaje.setText("Sin limite de grupos a consultar");
        }
        IDfCollection col = null;
//        List<String> grupos = new ArrayList<String>();
        try {
            IDfQuery q = new DfQuery();
            q.setDQL(dql);
            col = q.execute(gsesion, DfQuery.EXEC_QUERY);
            String padre = grupo;
            while (col.next()) {
                numconsultas += 1;
                //     System.out.print(padre + " --> ");
                IDfTypedObject r = col.getTypedObject();
                String hijo = r.getValueAt(0).asString();
                DefaultMutableTreeNode nodohijo = new DefaultMutableTreeNode(hijo);
                nodo.add(nodohijo);
                this.barradocum.setLabelMensa((padre.trim().isEmpty()) ? "raiz" + " -> " + nodohijo : padre + " -> " + nodohijo);
                if (this.barradocum.getPARAR()) {
                    return;
                }
                if (esGrupoPadre(hijo) && !grupo.equals(" ")) {
                    //     System.out.println(hijo);
                    dameGrupos(hijo, nodohijo);
                } else {
                    //     System.out.println(hijo);
                }
            }
//            System.out.println();
        } catch (DfException ex) {
            Utilidades.escribeLog("DameGrupos. Error al ejecutar DQL: " + ex.getMessage() + NEWLINE);
        }

    }

    private void cargarInfoNodo(String nombre) {
        String r_object_id = utildocum.dameRobjectidDeGrupo(nombre, gsesion);
        String descripcion = utildocum.dameDescripcionGrupo(nombre, gsesion);
        String clasegrupo = utildocum.dameClaseGrupo(nombre, gsesion);
        ArrayList<String> hijos = utildocum.dameGruposHijos(nombre, gsesion);
        int numhijos = hijos.size();
        int cont = 4 + numhijos;
        TablaSinEditarCol modeloLotes = new TablaSinEditarCol();

        String[] cabecera = {"Propiedad", "Valor"};
        String[][] datos = new String[cont][2];
        datos[0][0] = "Nombre";
        datos[0][1] = nombre;
        datos[1][0] = "r_object_id";
        datos[1][1] = r_object_id;
        datos[2][0] = "Descripción";
        datos[2][1] = descripcion;
        datos[3][0] = "Clase de Grupo";
        datos[3][1] = clasegrupo;

        for (int i = 0; i < hijos.size(); i++) {
            datos[i + 4][0] = "Grupo hijo";
            datos[i + 4][1] = hijos.get(i);
        }

        modeloLotes = new TablaSinEditarCol(datos, cabecera);
        tablaInfo.setModel(modeloLotes);
        TableColumn columna = tablaInfo.getColumnModel().getColumn(0);
        columna.setPreferredWidth(150);
        columna.setMaxWidth(150);
        columna.sizeWidthToFit();
        pintarTabla();

    }

    private void pintarTabla() {
        tablaInfo.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table,
                    Object value, boolean isSelected, boolean hasFocus, int row, int col) {

                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
//                boolean oddRow = (row % 2 == 0);
//                if (oddRow) {
//                    setBackground(new Color(245, 245, 245)); // gris claro
//                } else {
//                    setBackground(Color.WHITE);
//                }
                setOpaque(true);
                setForeground(Color.BLACK);
                setBackground(new Color(245, 245, 245)); // gris claro
                setBackground(botonBuscar.getBackground());
                String nombre = (String) table.getValueAt(row, 0);
                if (nombre.equals("Super Tipo")) {
                    //   setOpaque(true);
                    setForeground(Color.BLUE);
                }
                if (nombre.equals("Nombre")) {
                    setFont(getFont().deriveFont(Font.BOLD));
                }
                if (isSelected) {
                    setBackground(new Color(175, 205, 235)); // azul claro selección
                }
                return this;
            }
        });
    }

    public void expandOrCollapsToLevel(JTree tree, TreePath treePath, int level, boolean expand) {
        try {
            expandOrCollapsePath(tree, treePath, level, 0, expand);
        } catch (Exception e) {
            // e.printStackTrace();

        }
    }

    public void expandOrCollapsePath(JTree tree, TreePath treePath, int level, int currentLevel, boolean expand) {
//      System.err.println("Exp level "+currentLevel+", exp="+expand);
        if (expand && level <= currentLevel && level > 0) {
            return;
        }

        TreeNode treeNode = (TreeNode) treePath.getLastPathComponent();
        TreeModel treeModel = tree.getModel();
        if (treeModel.getChildCount(treeNode) >= 0) {
            for (int i = 0; i < treeModel.getChildCount(treeNode); i++) {
                TreeNode n = (TreeNode) treeModel.getChild(treeNode, i);
                TreePath path = treePath.pathByAddingChild(n);
                expandOrCollapsePath(tree, path, level, currentLevel + 1, expand);
            }
            if (!expand && currentLevel < level) {
                return;
            }
        }
        if (expand) {
            tree.expandPath(treePath);
//         System.err.println("Path expanded at level "+currentLevel+"-"+treePath);
        } else {
            tree.collapsePath(treePath);
//         System.err.println("Path collapsed at level "+currentLevel+"-"+treePath);
        }
    }

    public class RendererArbol extends DefaultTreeCellRenderer {

        ImageIcon carpeta;
        ImageIcon carpeta_abierta;
        ImageIcon grupo;
        ImageIcon role;
        ImageIcon pgrupo;
        ImageIcon mrole;

        public RendererArbol() {
//            carpeta = new ImageIcon(PantallaArbolGrupos.class.getClassLoader().getResource("es/documentum/imagenes/carpeta_azul.png"));
//            carpeta_abierta = new ImageIcon(PantallaArbolGrupos.class.getClassLoader().getResource("es/documentum/imagenes/carpeta_azul_abierta.png"));

            carpeta = new ImageIcon(PantallaArbolGrupos.class.getClassLoader().getResource("es/documentum/imagenes/grupo_cerrado.png"));
            carpeta_abierta = new ImageIcon(PantallaArbolGrupos.class.getClassLoader().getResource("es/documentum/imagenes/grupo_abierto.png"));
            grupo = new ImageIcon(PantallaArbolGrupos.class.getClassLoader().getResource("es/documentum/imagenes/grupo.png"));
            role = new ImageIcon(PantallaArbolGrupos.class.getClassLoader().getResource("es/documentum/imagenes/role-grupo.png"));
            pgrupo = new ImageIcon(PantallaArbolGrupos.class.getClassLoader().getResource("es/documentum/imagenes/privilege_group.png"));
            mrole = new ImageIcon(PantallaArbolGrupos.class.getClassLoader().getResource("es/documentum/imagenes/module_role.png"));

        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            String nombre = value.toString();
            DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) value;
            String clase = utildocum.dameClaseGrupo(nombre, gsesion);

            if (expanded) {
                setIcon(carpeta_abierta);
            } else if (leaf && row > 0) {
                switch (clase) {
                    case "role":
                        setIcon(role);
                        break;
                    case "privilege group":
                        setIcon(pgrupo);
                        break;
                    case "module role":
                        setIcon(mrole);
                        break;
                    default:
                        setIcon(grupo);
                }
                if (esGrupoPadre(nombre)) {
                    setIcon(carpeta);
                }
            } else {
                setIcon(carpeta);
            }

            return this;
        }

    }

    private TreePath buscarNodo(DefaultMutableTreeNode root, String s) {
        @SuppressWarnings("unchecked")
        Enumeration<DefaultMutableTreeNode> e = root.depthFirstEnumeration();
        // Busca nombre esacto
        while (e.hasMoreElements()) {
            DefaultMutableTreeNode node = e.nextElement();
            System.out.println(node.toString());
            if (node.toString().equalsIgnoreCase(s) && !util.estaEnLista(busqueda, node.toString())) {
                busqueda.add(node.toString());
                return new TreePath(node.getPath());
            }
        }
        // Si no encuentra nombre busca que empiece por
        e = root.depthFirstEnumeration();
        while (e.hasMoreElements()) {
            DefaultMutableTreeNode node = e.nextElement();
            System.out.println(node.toString());
            if (node.toString().toLowerCase().contains(s.toLowerCase()) && !util.estaEnLista(busqueda, node.toString())) {
                busqueda.add(node.toString());
                return new TreePath(node.getPath());
            }
        }
        return null;
    }

    private TreePath buscarNodoSiguiente(String s) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolGrupos.getLastSelectedPathComponent();

        if (node != null) {
            return buscarNodo(raiz, s);
        } else {
            busqueda.clear();
            return buscarNodo(raiz, s);
        }
    }

    public String infoNodo(DefaultMutableTreeNode nodo, String dato) {
        String informacion = "";
        if (nodo == null) {
            return informacion;
        }
        Object nodeInfo = nodo.getUserObject();
        String nombrefichero = nodeInfo.toString();
        String rutafichero = nodeInfo.toString();

        DefaultMutableTreeNode nodopadre = nodo;
        while (!nodopadre.isRoot()) {
            nodopadre = (DefaultMutableTreeNode) nodopadre.getParent();
            nodeInfo = nodopadre.getUserObject();
            if (nodeInfo.toString().equals("/")) {
                rutafichero = nodeInfo.toString() + rutafichero;
            } else {
                rutafichero = nodeInfo.toString() + "/" + rutafichero;
            }
        }
        return informacion;
    }

    public void actualizarNodo(DefaultMutableTreeNode nodo, Boolean mensaje) {
        String rutanodo = "";
        Object[] paths = nodo.getPath();
        for (int i = 0; i < paths.length; i++) {
            rutanodo += paths[i];
            if (i + 1 < paths.length) {
                if (!rutanodo.equals("/")) {
                    rutanodo += "/";
                }
            }
        }
        if (mensaje) {

        }
        DefaultMutableTreeNode nodopadre = (DefaultMutableTreeNode) nodo.getParent();
        String nombre = nodo.toString();
        int nivel = nodo.getDepth();

        expandOrCollapsToLevel(arbolGrupos, new TreePath(nodo.getPath()), nivel, true);

    }

    private IDfSession sesionDocumentum() {
        String dirdfc = util.usuarioHome() + util.separador() + "documentumdfcs" + util.separador() + "documentum" + util.separador() + "shared" + util.separador();
        try {
            ClassPathUpdater.add(dirdfc);
            ClassPathUpdater.add(dirdfc + "lib" + util.separador() + "jsafeFIPS.jar");
        } catch (Exception ex) {
            Utilidades.escribeLog("Error al actualizar el Classpath  - Error: " + ex.getMessage());
        }
        UtilidadesDocumentum utildocum = new UtilidadesDocumentum(dirdfc + "dfc.properties");
        IDfSession nuevasesion = utildocum.conectarDocumentum();
        return nuevasesion;
    }

    public void recorrerArbol() {
        TreeNode raiz = (TreeNode) arbolGrupos.getModel().getRoot();
        System.out.println("\nRecorrer Arbol\n");
        imprimirNodos(raiz);

    }

    public void imprimirNodos(TreeNode nodo) {
        System.out.println(nodo.toString());
        if (nodo.getChildCount() >= 0) {
            for (Enumeration e = nodo.children(); e.hasMoreElements();) {
                TreeNode n = (TreeNode) e.nextElement();
                imprimirNodos(n);
            }
        }
    }

    protected static Image getLogo() {
        java.net.URL imgURL = PantallaArbolGrupos.class.getClassLoader().getResource("es/documentum/imagenes/grupo.png");

        if (imgURL != null) {
            return new ImageIcon(imgURL).getImage();
        } else {
            return null;
        }
    }
}
