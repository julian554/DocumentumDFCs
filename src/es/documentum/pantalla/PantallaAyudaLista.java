package es.documentum.pantalla;

import es.documentum.pruebas.PantallaSQL;
import es.documentum.utilidades.UtilidadesDocumentum;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.DefaultListModel;

public class PantallaAyudaLista extends javax.swing.JFrame {

    private final ArrayList<String> listaPistas;

    private String texto = "";
    public static PantallaSQL ventanapadrePru = null;
    public static PantallaDqlconTabs ventanapadreDql = null;
    public static PantallaSqlconTabs ventanapadreSql = null;
    UtilidadesDocumentum utildocum = new UtilidadesDocumentum();

    public String getTexto() {
        return texto;
    }

    public void setTexto(String texto) {
        this.texto = texto;
    }

    public void asignarFocoListaAyuda() {
        listaAyuda.requestFocus();
        if (listaAyuda.getModel().getSize() > 0) {
            listaAyuda.setSelectedIndex(0);
        }
    }

    public PantallaAyudaLista(PantallaSqlconTabs parent, boolean modal) {
        ventanapadreSql = parent;
        initComponents();
        listaPistas = new ArrayList<>();
        //setVisible(true);
    }

    public PantallaAyudaLista(PantallaDqlconTabs parent, boolean modal) {
        ventanapadreDql = parent;
        initComponents();
        listaPistas = new ArrayList<>();
        //setVisible(true);
    }

    public PantallaAyudaLista(PantallaSQL parent, boolean modal) {
        ventanapadrePru = parent;
        initComponents();
        listaPistas = new ArrayList<>();
        //setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        listaAyuda = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(246, 271));
        setMinimumSize(new java.awt.Dimension(246, 271));
        setName("apiAyuda"); // NOI18N
        setUndecorated(true);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jScrollPane2.setMinimumSize(new java.awt.Dimension(246, 271));
        jScrollPane2.setName(""); // NOI18N
        jScrollPane2.setPreferredSize(new java.awt.Dimension(246, 271));

        listaAyuda.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listaAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listaAyudaMousePressed(evt);
            }
        });
        listaAyuda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listaAyudaKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(listaAyuda);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_formKeyTyped

    private void listaAyudaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaAyudaMousePressed
        if (listaAyuda.getSelectedIndex() < 0) {
            return;
        }

        if (evt.getClickCount() == 2 && evt.getButton() == java.awt.event.MouseEvent.BUTTON1 && listaAyuda.getSelectedIndex() >= 0) {
            AsignarValorDeLista();
        }
    }//GEN-LAST:event_listaAyudaMousePressed

    private void listaAyudaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listaAyudaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (listaAyuda.getSelectedIndex() >= 0) {
                AsignarValorDeLista();
            }
        }

        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            if (listaAyuda.getSelectedIndex() == 0) {
                ventanapadreDql.asignarFocoTextoDql();
            }
        }

    }//GEN-LAST:event_listaAyudaKeyPressed

    private void AsignarValorDeLista() {
        String valor = listaAyuda.getModel().getElementAt(listaAyuda.getSelectedIndex()) + " ";
        if (valor.trim().equalsIgnoreCase("INSERT")) {
            valor = "INSERT INTO ";
        } else if (valor.trim().equalsIgnoreCase("REGISTER")) {
            valor = "REGISTER TABLE ";
        } else if (valor.trim().equalsIgnoreCase("COUNT") || valor.trim().equalsIgnoreCase("SUM")
                || valor.trim().equalsIgnoreCase("AVG") || valor.trim().equalsIgnoreCase("MIN")
                || valor.trim().equalsIgnoreCase("MAX") || valor.trim().equalsIgnoreCase("DATE")
                || valor.trim().equalsIgnoreCase("UPPER") || valor.trim().equalsIgnoreCase("LOWER")
                || valor.trim().equalsIgnoreCase("SUBSTR") || valor.trim().equalsIgnoreCase("DATEDIFF")
                || valor.trim().equalsIgnoreCase("TYPE") || valor.trim().equalsIgnoreCase("FOLDER")
                || valor.trim().equalsIgnoreCase("CABINET") || valor.trim().equalsIgnoreCase("ENABLE")) {
            valor = valor.trim() + "(";
        } else if (valor.trim().equalsIgnoreCase("IN")) {
            valor = valor.trim() + " (";
        } else if (valor.trim().equalsIgnoreCase("can_fetch")) { //EXECUTE
            valor = "can_fetch FOR ";
        } else if (valor.trim().equalsIgnoreCase("check_retention_expired")) {
            valor = "check_retention_expired WITH QUERY = ";
        } else if (valor.trim().equalsIgnoreCase("check_security")) {
            valor = "check_security WITH ";
        } else if (valor.trim().equalsIgnoreCase("delete_replica")) {
            valor = "delete_replica FOR ";
        } else if (valor.trim().equalsIgnoreCase("destroy_content")) {
            valor = "destroy_content FOR ";
        } else if (valor.trim().equalsIgnoreCase("do_method")) {
            valor = "do_method WITH METHOD = ";
        } else if (valor.trim().equalsIgnoreCase("exec_sql")) {
            valor = "exec_sql WITH query = ";
        } else if (valor.trim().equalsIgnoreCase("exec_select_sql")) {
            valor = "exec_select_sql WITH query = ";
        } else if (valor.trim().equalsIgnoreCase("export_ticket_key")) {
            valor = "export_ticket_key WITH PASSWORD = ";
        } else if (valor.trim().equalsIgnoreCase("fix_link_cnt")) {
            valor = "fix_link_cnt FOR ";
        } else if (valor.trim().equalsIgnoreCase("get_file_url")) {
            valor = "get_file_url FOR ";
        } else if (valor.trim().equalsIgnoreCase("http_post")) {
            valor = "http_post WITH app_server_name = ";
        } else if (valor.trim().equalsIgnoreCase("import_replica")) {
            valor = "import_replica FOR ";
        } else if (valor.trim().equalsIgnoreCase("import_ticket_key")) {
            valor = "import_ticket_key WITH KEY_STRING = ";
        } else if (valor.trim().equalsIgnoreCase("make_index")) {
            valor = "make_index WITH type_name = ";
        } else if (valor.trim().equalsIgnoreCase("mark_as_archived")) {
            valor = "mark_as_archived FOR ";
        } else if (valor.trim().equalsIgnoreCase("mark_for_retry")) {
            valor = "mark_for_retry WITH NAME = ";
        } else if (valor.trim().equalsIgnoreCase("modify_trace")) {
            valor = "modify_trace WITH subsystem = ";
        } else if (valor.trim().equalsIgnoreCase("move_index")) {
            valor = "move_index FOR ";
        } else if (valor.trim().equalsIgnoreCase("purge_audit")) {
            valor = "purge_audit WITH delete_mode = ";
        } else if (valor.trim().equalsIgnoreCase("purge_content")) {
            valor = "purge_content FOR ";
        } else if (valor.trim().equalsIgnoreCase("push_content_attrs")) {
            valor = "push_content_attrs FOR ";
        } else if (valor.trim().equalsIgnoreCase("recover_auto_tasks")) {
            valor = "recover_auto_tasks WITH ";
        } else if (valor.trim().equalsIgnoreCase("register_asset")) {
            valor = "register_asset FOR ";
        } else if (valor.trim().equalsIgnoreCase("reorganize_table")) {
            valor = "reorganize_table WITH table_name = ";
        } else if (valor.trim().equalsIgnoreCase("replicate")) {
            valor = "replicate WITH query = ";
        } else if (valor.trim().equalsIgnoreCase("restore_content")) {
            valor = "restore_content FOR ";
        } else if (valor.trim().equalsIgnoreCase("set_apideadlock")) {
            valor = "set_apideadlock WITH API = ";
        } else if (valor.trim().equalsIgnoreCase("set_content_attrs")) {
            valor = "set_content_attrs FOR ";
        } else if (valor.trim().equalsIgnoreCase("set_options")) {
            valor = "set_options WITH option = ";
        } else if (valor.trim().equalsIgnoreCase("set_session_dd_locale")) {
            valor = "set_session_dd_locale WITH ";
        } else if (valor.trim().equalsIgnoreCase("transcode_content")) {
            valor = "transcode_content FOR ";
        } else if (valor.trim().equalsIgnoreCase("update_statistics")) {
            valor = "update_statistics WITH table_name = ";
        }

        if (ventanapadreDql != null) {
            String textosobreescrito = ventanapadreDql.getTextoayudaescrito();
            int posicionfin = ventanapadreDql.getPosicionTextoDql();
            int posicioninicio = posicionfin - textosobreescrito.length();
            if (valor.toUpperCase().contains(textosobreescrito.toUpperCase())) {
                ventanapadreDql.borrarTextoDql(posicioninicio, textosobreescrito.length());
                ventanapadreDql.insertartexto(posicioninicio, valor);
            } else {
                ventanapadreDql.insertartexto(posicionfin, valor);
            }
            ventanapadreDql.ActualizarToolTipText();
        }

        if (ventanapadreSql != null) {
            ventanapadreSql.insertartexto(ventanapadreSql.getPosicionTextoSql(), valor);
        }
        if (ventanapadrePru != null) {
            ventanapadrePru.insertartexto(ventanapadrePru.getPosicionTextoSql(), valor);
        }

        this.dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PantallaAyudaApi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PantallaAyudaApi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PantallaAyudaApi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PantallaAyudaApi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (ventanapadreDql != null) {
                    new PantallaAyudaLista(ventanapadreDql, true);
                }
                if (ventanapadreSql != null) {
                    new PantallaAyudaLista(ventanapadreSql, true);
                }
                if (ventanapadrePru != null) {
                    new PantallaAyudaLista(ventanapadrePru, true);
                }
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listaAyuda;
    // End of variables declaration//GEN-END:variables

    public void cargarDatosAyuda(ArrayList<String> listaDatosAyuda) {
        DefaultListModel modelolista = new DefaultListModel();
        for (int n = 0; n < listaDatosAyuda.size(); n++) {
            modelolista.add(n, listaDatosAyuda.get(n));
        }
        listaAyuda.setModel(modelolista);
        if (listaAyuda.getModel().getSize() > 0) {
            listaAyuda.setSelectedIndex(0);
            listaAyuda.ensureIndexIsVisible(listaAyuda.getSelectedIndex());
        }
    }

    public ArrayList<String> buscarEnDatosAyuda(String cadena) {
        ArrayList<String> listaPistas = new ArrayList<>();
        for (int n = 0; n < this.listaPistas.size(); n++) {
            if (this.listaPistas.get(n).contains(cadena.toLowerCase())) {
                listaPistas.add(this.listaPistas.get(n));
            }
        }
        return listaPistas;
    }

}
