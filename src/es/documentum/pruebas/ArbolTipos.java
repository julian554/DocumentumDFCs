package es.documentum.pruebas;

import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.client.IDfSession;
import com.documentum.fc.client.IDfTypedObject;
import com.documentum.fc.common.DfException;
import es.documentum.utilidades.ClassPathUpdater;
import es.documentum.utilidades.MiProperties;
import es.documentum.utilidades.Utilidades;
import es.documentum.utilidades.UtilidadesDocumentum;
import java.awt.Component;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

public class ArbolTipos extends javax.swing.JFrame {
    
    private static IDfSession session = null;
    private static final String servidor = "vilcs470";
    private static final String userName = "dmadmin";
    private static final String password = "documentum";
    private static final String docbase = "D_A1_CYC";
    //private static final String docbase = "prudcm1";
    private static final String NEWLINE = "\r\n";
    private static FileWriter fichero = null;
    private static Date fecha = new Date();
    DefaultMutableTreeNode raiz = new DefaultMutableTreeNode("dm_sysobject");
    DefaultTreeModel modelo = new DefaultTreeModel(raiz);
    
    public ArbolTipos() {
        initComponents();
        inicializar();
        cargarArbol();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollArbol = new javax.swing.JScrollPane();
        arbolTipos = new javax.swing.JTree();
        BotonCerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tipos Documentales");

        arbolTipos.setAutoscrolls(true);
        arbolTipos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                arbolTiposMousePressed(evt);
            }
        });
        ScrollArbol.setViewportView(arbolTipos);

        BotonCerrar.setText("Cerrar");
        BotonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollArbol)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 723, Short.MAX_VALUE)
                        .addComponent(BotonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollArbol, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(BotonCerrar)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_BotonCerrarActionPerformed

    private void arbolTiposMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_arbolTiposMousePressed
        if (SwingUtilities.isRightMouseButton(evt) && !arbolTipos.isSelectionEmpty()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) arbolTipos.getLastSelectedPathComponent();
            if (node == null) // Nothing is selected.
            {
                return;
            }

            Object nodeInfo = node.getUserObject();
            String nombre = nodeInfo.toString();
            
            if (esPadre(nombre)) {
    //            popupDirectorio.show((Component) evt.getSource(), evt.getX(), evt.getY());
            } else {
     //           popupFichero.show((Component) evt.getSource(), evt.getX(), evt.getY());
            }
            System.out.println(nombre + " --> " + (esPadre(nombre) ? "Nodo padre" : "Hijo"));
        }
    }//GEN-LAST:event_arbolTiposMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArbolTipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArbolTipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArbolTipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArbolTipos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArbolTipos();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonCerrar;
    private javax.swing.JScrollPane ScrollArbol;
    private javax.swing.JTree arbolTipos;
    // End of variables declaration//GEN-END:variables

    private void inicializar() {
        try {
            fichero = new FileWriter(System.getProperty("user.home").replace("\\", "/") + "/leerTipos.log");
            Utilidades util = new Utilidades();
            String dirdfc = util.usuarioHome() + util.separador() + "documentumdfcs" + util.separador() + "documentum" + util.separador() + "shared" + util.separador();
            try {
                ClassPathUpdater.add(dirdfc);
                ClassPathUpdater.add(dirdfc + "lib" + util.separador() + "jcmFIPS.jar");
            } catch (Exception ex) {
                Utilidades.escribeLog("Error al actualizar el Classpath  - Error: " + ex.getMessage());
            }
            MiProperties prop = util.leerPropeties(dirdfc + "dfc.properties");
            prop.setProperty("dfc.docbroker.host[0]", servidor);
            prop.setProperty("dfc.docbroker.port[0]", "1489");
            util.escribirProperties(dirdfc + "dfc.properties", prop);
            
            UtilidadesDocumentum utildocum = new UtilidadesDocumentum(dirdfc + "dfc.properties");
            session = utildocum.conectarDocumentum(userName, password, docbase, servidor, "1489");
        } catch (Exception ex) {
            
        }
    }
    
    public static Boolean esPadre(String tipo) {
        String dql = "select name from dm_type where super_name ='" + tipo + "'";
        try {
            String resultado = execQuery(dql, session);
            return !resultado.isEmpty();
        } catch (Exception ex) {
            log_f("Error al consultar esPadre - Tipo: " + tipo + " - Error: " + ex.getMessage());
        }
        return false;
    }
    
    public static String execQuery(String query, IDfSession sesion) {
        log_f("execQuery: " + query + NEWLINE);
        String retVal = "";
        IDfCollection col = null;
        try {
            IDfQuery q = new DfQuery();
            q.setDQL(query);
            col = q.execute(sesion, DfQuery.EXEC_QUERY);
            if (col.next()) {
                IDfTypedObject r = col.getTypedObject();
                retVal = r.getValueAt(0).asString();
            }
        } catch (DfException ex) {
            log_f("execQuery.error al ejecutar DQL: " + ex.getMessage() + NEWLINE);
        }
        try {
            col.close();
        } catch (DfException e) {
            log_f("execQuery.error General: " + e.getMessage() + NEWLINE);
        }
        return retVal;
    }
    
    private static String usuarioHome() {
        return System.getProperty("user.home").replace("\\", "/");
    }
    
    private Boolean crearDirectorio(String dir) {
        if (dir.isEmpty()) {
            return false;
        }
        File directorio = new File(dir);
        return directorio.mkdirs();
    }
    
    private static String fecha_log() {
        Calendar cal = Calendar.getInstance();
        String hora = String.valueOf(cal.get(Calendar.HOUR_OF_DAY)).length() == 1 ? "0"
                + String.valueOf(cal.get(Calendar.HOUR_OF_DAY)) : String.valueOf(cal.get(Calendar.HOUR_OF_DAY));
        String minuto = String.valueOf(cal.get(Calendar.MINUTE)).length() == 1 ? "0"
                + String.valueOf(cal.get(Calendar.MINUTE)) : String.valueOf(cal.get(Calendar.MINUTE));
        String segundo = String.valueOf(cal.get(Calendar.SECOND)).length() == 1 ? "0"
                + String.valueOf(cal.get(Calendar.SECOND)) : String.valueOf(cal.get(Calendar.SECOND));
        String anio = String.valueOf(cal.get(Calendar.YEAR));
        String mes = String.valueOf((cal.get(Calendar.MONTH) + 1)).length() == 1 ? "0"
                + String.valueOf((cal.get(Calendar.MONTH) + 1)) : String.valueOf((cal.get(Calendar.MONTH) + 1));
        String dia = String.valueOf(cal.get(Calendar.DAY_OF_MONTH)).length() == 1 ? "0"
                + String.valueOf(cal.get(Calendar.DAY_OF_MONTH)) : String.valueOf(cal.get(Calendar.DAY_OF_MONTH));
        String fecha = anio + mes + dia + "_" + hora + minuto + segundo;
        return fecha;
    }
    
    private static void log_f(String message) {
        try {
            fichero.write(fecha + " \t ->\t" + message + "\n");
            fichero.flush();
        } catch (Exception e) {
            System.out.println("Excepcion en fichero de log: " + e.getMessage());
        }
        
    }
    
    private void cargarArbol() {
        arbolTipos.setModel(null);
        arbolTipos.setCellRenderer(new RendererArbol());
        arbolTipos.setModel(modelo);
        DameTipos("dm_sysobject", raiz);
        DefaultTreeCellRenderer render = (DefaultTreeCellRenderer) arbolTipos.getCellRenderer();
        this.setVisible(true);
    }
    
    private void DameTipos(String tipo, DefaultMutableTreeNode nodo) {
        String dql = "select name,super_name from dm_type where super_name='" + tipo + "' and super_name<>' ' order by 2,1";
        IDfCollection col = null;
        List<String> tipos = new ArrayList<String>();
        try {
            IDfQuery q = new DfQuery();
            q.setDQL(dql);
            col = q.execute(session, DfQuery.EXEC_QUERY);
            String padre = tipo;
            while (col.next()) {
                System.out.print(padre + " --> ");
                IDfTypedObject r = col.getTypedObject();
                String hijo = r.getValueAt(0).asString();
                DefaultMutableTreeNode nodohijo = new DefaultMutableTreeNode(hijo);
                nodo.add(nodohijo);
                
                if (esPadre(hijo)) {
                    System.out.println(hijo);
                    DameTipos(hijo, nodohijo);
                } else {
                    System.out.println(hijo);
                }
            }
//            System.out.println();
        } catch (DfException ex) {
            log_f("DameTipos. Error al ejecutar DQL: " + ex.getMessage() + NEWLINE);
        }
        
    }
    
    public static void expandOrCollapsToLevel(JTree tree, TreePath treePath, int level, boolean expand) {
        try {
            expandOrCollapsePath(tree, treePath, level, 0, expand);
        } catch (Exception e) {
            e.printStackTrace();
            
        }
    }
    
    public static void expandOrCollapsePath(JTree tree, TreePath treePath, int level, int currentLevel, boolean expand) {
//      System.err.println("Exp level "+currentLevel+", exp="+expand);
        if (expand && level <= currentLevel && level > 0) {
            return;
        }
        
        TreeNode treeNode = (TreeNode) treePath.getLastPathComponent();
        TreeModel treeModel = tree.getModel();
        if (treeModel.getChildCount(treeNode) >= 0) {
            for (int i = 0; i < treeModel.getChildCount(treeNode); i++) {
                TreeNode n = (TreeNode) treeModel.getChild(treeNode, i);
                TreePath path = treePath.pathByAddingChild(n);
                expandOrCollapsePath(tree, path, level, currentLevel + 1, expand);
            }
            if (!expand && currentLevel < level) {
                return;
            }
        }
        if (expand) {
            tree.expandPath(treePath);
//         System.err.println("Path expanded at level "+currentLevel+"-"+treePath);
        } else {
            tree.collapsePath(treePath);
//         System.err.println("Path collapsed at level "+currentLevel+"-"+treePath);
        }
    }
    
    public class RendererArbol extends DefaultTreeCellRenderer {
        
        ImageIcon carpeta;
        ImageIcon carpeta_abierta;
        ImageIcon documento;
        ImageIcon pdf;
        ImageIcon video;
        ImageIcon imagen;
        ImageIcon word;
        ImageIcon excel;
        ImageIcon powerpoint;
        ImageIcon texto;
        ImageIcon zip;
        ImageIcon java;
        
        public RendererArbol() {
            carpeta = new ImageIcon(ArbolTipos.class.getClassLoader().getResource("es/documentum/imagenes/carpeta_azul.png"));
            carpeta_abierta = new ImageIcon(ArbolTipos.class.getClassLoader().getResource("es/documentum/imagenes/carpeta_azul_abierta.png"));
            documento = new ImageIcon(ArbolTipos.class.getClassLoader().getResource("es/documentum/imagenes/texto.png"));
        }
        
        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
            String nombre = value.toString();
            DefaultMutableTreeNode nodo = (DefaultMutableTreeNode) value;
            String dir = infoNodo(nodo, "tamanio");
            
            if (expanded) {
                setIcon(carpeta_abierta);
            } else if (leaf && row > 0) {
                String extension = value.toString().substring(nombre.lastIndexOf(".") > 0 ? nombre.lastIndexOf(".") + 1 : nombre.length(), nombre.length()).toLowerCase();
                //     System.out.println(extension);
                if (dir.equals("dir")) {
                    setIcon(carpeta);
                } else {
                    setIcon(documento);
                }
                
            } else {
                setIcon(carpeta);
            }
            return this;
        }
        
    }
    
    public String infoNodo(DefaultMutableTreeNode nodo, String dato) {
        String informacion = "";
        if (nodo == null) {
            return informacion;
        }
        Object nodeInfo = nodo.getUserObject();
        String nombrefichero = nodeInfo.toString();
        String rutafichero = nodeInfo.toString();
        
        DefaultMutableTreeNode nodopadre = nodo;
        while (!nodopadre.isRoot()) {
            nodopadre = (DefaultMutableTreeNode) nodopadre.getParent();
            nodeInfo = nodopadre.getUserObject();
            if (nodeInfo.toString().equals("/")) {
                rutafichero = nodeInfo.toString() + rutafichero;
            } else {
                rutafichero = nodeInfo.toString() + "/" + rutafichero;
            }
        }
        return informacion;
    }
    
    public void actualizarNodo(DefaultMutableTreeNode nodo, Boolean mensaje) {
        String rutanodo = "";
        Object[] paths = nodo.getPath();
        for (int i = 0; i < paths.length; i++) {
            rutanodo += paths[i];
            if (i + 1 < paths.length) {
                if (!rutanodo.equals("/")) {
                    rutanodo += "/";
                }
            }
        }
        if (mensaje) {
            
        }
        DefaultMutableTreeNode nodopadre = (DefaultMutableTreeNode) nodo.getParent();
        String nombre = nodo.toString();
        int nivel = nodo.getDepth();
        
        expandOrCollapsToLevel(arbolTipos, new TreePath(nodo.getPath()), nivel, true);
        
    }
    
}
